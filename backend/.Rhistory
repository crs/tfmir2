library("infotheo")
library(preprocessCore)
PATH1 = "/Users/Maryam/Desktop/";
#2)Add required Functions
name<- function(A,x){
rownames(A)[x]
}
index<- function(A,x){
index = 0
for(i in 1:length(rownames(A))){
if(x == rownames(A)[i]){
index = i
}
}
index
}
#4)read two files: Transcription factor and gene expression
TranscriptionFactor = read.table(paste(PATH1,"genes_blood.csv",sep=""),fill = TRUE,sep="\t")
nrow(TranscriptionFactor)
TempTargetGene = read.table(paste(PATH1,"exp_absolute.csv",sep=""),sep="\t",header = TRUE, row.names = 1)
TargetGene = as.matrix(TempTargetGene)
#5)Calculate Correlation(pearson) & filter the interactions based on predetermined Threshold
for(i in 1:nrow(TranscriptionFactor))
{
message(i , " \tTranscriptopn Factor\t", TranscriptionFactor[i,1])
col = ncol(TargetGene) + 1
x = index(TargetGene,TranscriptionFactor[i,1])
message("x is: ",x)
if( x != 0){
sumcp <- 0
for(j in 1:nrow(TargetGene))
{
a <- cor(TargetGene[x,],TargetGene[j,],method = "pearson")
if(!is.na(a))
{
if((a > 0.55)){
sumcp <- sumcp + 1
str = cbind(name(TargetGene,x),name(TargetGene,j))
message("interaction is: ", name(TargetGene,x),"\t",name(TargetGene,j),"\t",a)
write.table(str,file = paste(PATH1,"SC_pearson.csv",sep=""),col.names=FALSE,row.names=FALSE,append = TRUE,sep = "\t")
}
}
}
sumcp
}
}
#4)read two files: Transcription factor and gene expression
TranscriptionFactor = read.table(paste(PATH1,"genes_blood.csv",sep=""),fill = TRUE,sep="\t")
nrow(TranscriptionFactor)
TempTargetGene = read.table(paste(PATH1,"exp_absolute.csv",sep=""),sep="\t",header = TRUE, row.names = 1)
TargetGene = as.matrix(TempTargetGene)
#5)Calculate Correlation(pearson) & filter
TempTargetGene = read.table(paste(PATH1,"exp_absolute.csv",sep=""),sep="\t",header = TRUE, row.names = 1)
TargetGene = as.matrix(TempTargetGene)
#5)Calculate Correlation(pearson) & filter the interactions based on predetermined Threshold
for(i in 1:nrow(TranscriptionFactor))
{
message(i , " \tTranscriptopn Factor\t", TranscriptionFactor[i,1])
col = ncol(TargetGene) + 1
x = index(TargetGene,TranscriptionFactor[i,1])
message("x is: ",x)
if( x != 0){
sumcp <- 0
for(j in 1:nrow(TargetGene))
{
a <- cor(TargetGene[x,],TargetGene[j,],method = "pearson")
if(!is.na(a))
{
if((a > 0.55)){
sumcp <- sumcp + 1
str = cbind(name(TargetGene,x),name(TargetGene,j))
message("interaction is: ", name(TargetGene,x),"\t",name(TargetGene,j),"\t",a)
write.table(str,file = paste(PATH1,"SC_pearson.csv",sep=""),col.names=FALSE,row.names=FALSE,append = TRUE,sep = "\t")
}
}
}
sumcp
}
}
#4)read two files: Transcription factor and gene expression
TranscriptionFactor = read.table(paste(PATH1,"genes_blood.csv",sep=""),fill = TRUE,sep="\t")
nrow(TranscriptionFactor)
TempTargetGene = read.table(paste(PATH1,"exp_absolute.csv",sep=""),sep="\t",header = TRUE, row.names = 1)
TargetGene = as.matrix(TempTargetGene)
#5)Calculate Correlation(pearson) & filter the interactions based on predetermined Threshold
for(i in 1:nrow(TranscriptionFactor))
{
message(i , " \tTranscriptopn Factor\t", TranscriptionFactor[i,1])
col = ncol(TargetGene) + 1
x = index(TargetGene,TranscriptionFactor[i,1])
message("x is: ",x)
if( x != 0){
sumcp <- 0
for(j in 1:nrow(TargetGene))
{
a <- cor(TargetGene[x,],TargetGene[j,],method = "pearson")
if(!is.na(a))
{
if((a > 0.7)){
sumcp <- sumcp + 1
str = cbind(name(TargetGene,x),name(TargetGene,j))
message("interaction is: ", name(TargetGene,x),"\t",name(TargetGene,j),"\t",a)
write.table(str,file = paste(PATH1,"SC_pearson.csv",sep=""),col.names=FALSE,row.names=FALSE,append = TRUE,sep = "\t")
}
}
}
sumcp
}
}
#4)read two files: Transcription factor and gene expression
TranscriptionFactor = read.table(paste(PATH1,"genes_blood.csv",sep=""),fill = TRUE,sep="\t")
nrow(TranscriptionFactor)
TempTargetGene = read.table(paste(PATH1,"exp_absolute.csv",sep=""),sep="\t",header = TRUE, row.names = 1)
TargetGene = as.matrix(TempTargetGene)
#5)Calculate Correlation(pearson) & filter the interactions based on predetermined Threshold
for(i in 1:nrow(TranscriptionFactor))
{
message(i , " \tTranscriptopn Factor\t", TranscriptionFactor[i,1])
col = ncol(TargetGene) + 1
x = index(TargetGene,TranscriptionFactor[i,1])
message("x is: ",x)
if( x != 0){
sumcp <- 0
for(j in 1:nrow(TargetGene))
{
a <- cor(TargetGene[x,],TargetGene[j,],method = "pearson")
if(!is.na(a))
{
if((a > 0.9)){
sumcp <- sumcp + 1
str = cbind(name(TargetGene,x),name(TargetGene,j))
message("interaction is: ", name(TargetGene,x),"\t",name(TargetGene,j),"\t",a)
write.table(str,file = paste(PATH1,"SC_pearson.csv",sep=""),col.names=FALSE,row.names=FALSE,append = TRUE,sep = "\t")
}
}
}
sumcp
}
}
A = c(0,0,1,1,0,1)
B = c(1,0,0,0,1,1)
C = cor(A,B,method="pearson")
C
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=5, max = 5)
number_motifs = length(no_cliques)
number_motifs
P_value = 0
plot(graph)
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=5, max = 5)
number_motifs = length(no_cliques)
P_value = 0
plot(graph)
#L = as.integer(length(get.edgelist(graph))/10)
L = 2 * length(no_cliques)
#L = 2 * length(length(get.edgelist(graph)))
for(i in 1:100){
g.random=rewire(graph, keeping_degseq(loops=TRUE, niter = L))
no_cliques_random = cliques(g.random, min=5, max = 5)
number_motifs_random = length(no_cliques_random)
if(number_motifs_random > number_motifs || number_motifs_random == number_motifs)
P_value = P_value + 1
print(c(i,number_motifs_random,P_value))
}
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=8, max = 8)
number_motifs = length(no_cliques)
P_value = 0
plot(graph)
#L = as.integer(length(get.edgelist(graph))/10)
L = 2 * length(no_cliques)
#L = 2 * length(length(get.edgelist(graph)))
for(i in 1:100){
g.random=rewire(graph, keeping_degseq(loops=TRUE, niter = L))
no_cliques_random = cliques(g.random, min=8, max = 8)
number_motifs_random = length(no_cliques_random)
if(number_motifs_random > number_motifs || number_motifs_random == number_motifs)
P_value = P_value + 1
print(c(i,number_motifs_random,P_value))
}
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=6, max = 6)
number_motifs = length(no_cliques)
P_value = 0
plot(graph)
#L = as.integer(length(get.edgelist(graph))/10)
L = 2 * length(no_cliques)
#L = 2 * length(length(get.edgelist(graph)))
for(i in 1:100){
g.random=rewire(graph, keeping_degseq(loops=TRUE, niter = L))
no_cliques_random = cliques(g.random, min=6, max = 6)
number_motifs_random = length(no_cliques_random)
if(number_motifs_random > number_motifs || number_motifs_random == number_motifs)
P_value = P_value + 1
print(c(i,number_motifs_random,P_value))
}
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=3, max = 3)
number_motifs = length(no_cliques)
P_value = 0
plot(graph)
help(graph)
graph.edges
get.edges(graph)
get.edgeslist(graph)
el
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=3, max = 3)
number_motifs = length(no_cliques)
P_value = 0
plot(graph)
niter = 2*length(get.edgelist(graph))
niter
length(get.edgelist(graph)
)
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=3, max = 3)
number_motifs = length(no_cliques)
P_value = 0
plot(graph)
#L = as.integer(length(get.edgelist(graph))/10)
length(get.edgelist(graph))
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=3, max = 3)
number_motifs = length(no_cliques)
P_value = 0
plot(graph)
#L = as.integer(length(get.edgelist(graph))/10)
niter = 2*length(get.edgelist(graph))
for(i in 1:100){
g.random=rewire(graph, keeping_degseq(loops=TRUE, niter = L))
no_cliques_random = cliques(g.random, min=3, max = 3)
number_motifs_random = length(no_cliques_random)
if(number_motifs_random > number_motifs || number_motifs_random == number_motifs)
P_value = P_value + 1
print(c(i,number_motifs_random,P_value))
}
#This function reads a graph file in a tabular format, finds motifs, randomize it and then calculates P-value
#The motifs of size 3,4 are significant in toyNetwork. not 5. L = 3 * length(no_cliques).
#non of the cliques of size 3,4 and 5 are significant in Ecoli.
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=3, max = 3)
number_motifs = length(no_cliques)
P_value = 0
plot(graph)
#L = as.integer(length(get.edgelist(graph))/10)
niter = length(get.edgelist(graph))
for(i in 1:100){
g.random=rewire(graph, keeping_degseq(loops=TRUE, niter = L))
no_cliques_random = cliques(g.random, min=3, max = 3)
number_motifs_random = length(no_cliques_random)
if(number_motifs_random > number_motifs || number_motifs_random == number_motifs)
P_value = P_value + 1
print(c(i,number_motifs_random,P_value))
}
number_motifs
#This function reads a graph file in a tabular format, finds motifs, randomize it and then calculates P-value
#The motifs of size 3,4 are significant in toyNetwork. not 5. L = 3 * length(no_cliques).
#non of the cliques of size 3,4 and 5 are significant in Ecoli.
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=5, max = 5)
number_motifs = length(no_cliques)
P_value = 0
plot(graph)
number_motifs
for(i in 1:100){
g.random=rewire(graph, keeping_degseq(loops=TRUE, niter = L))
no_cliques_random = cliques(g.random, min=5, max = 5)
number_motifs_random = length(no_cliques_random)
if(number_motifs_random > number_motifs || number_motifs_random == number_motifs)
P_value = P_value + 1
print(c(i,number_motifs_random,P_value))
}
#This function reads a graph file in a tabular format, finds motifs, randomize it and then calculates P-value
#The motifs of size 3,4 are significant in toyNetwork. not 5. L = 3 * length(no_cliques).
#non of the cliques of size 3,4 and 5 are significant in Ecoli.
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=5, max = 5)
number_motifs = length(no_cliques)
P_value = 0
plot(graph)
#L = as.integer(length(get.edgelist(graph))/10)
niter = 0.5 * length(get.edgelist(graph))
number_motifs
for(i in 1:100){
g.random=rewire(graph, keeping_degseq(loops=TRUE, niter = L))
no_cliques_random = cliques(g.random, min=5, max = 5)
number_motifs_random = length(no_cliques_random)
if(number_motifs_random > number_motifs || number_motifs_random == number_motifs)
P_value = P_value + 1
print(c(i,number_motifs_random,P_value))
}
#This function reads a graph file in a tabular format, finds motifs, randomize it and then calculates P-value
#The motifs of size 3,4 are significant in toyNetwork. not 5. L = 3 * length(no_cliques).
#non of the cliques of size 3,4 and 5 are significant in Ecoli.
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=5, max = 5)
number_motifs = length(no_cliques)
P_value = 0
plot(graph)
#L = as.integer(length(get.edgelist(graph))/10)
L = length(get.edgelist(graph))
number_motifs
L = length(get.edgelist(graph))
#L = 2 * length(length(get.edgelist(graph)))
for(i in 1:100){
g.random=rewire(graph, keeping_degseq(loops=TRUE, niter = L))
no_cliques_random = cliques(g.random, min=5, max = 5)
number_motifs_random = length(no_cliques_random)
if(number_motifs_random > number_motifs || number_motifs_random == number_motifs)
P_value = P_value + 1
print(c(i,number_motifs_random,P_value))
}
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=5, max = 5)
number_motifs = length(no_cliques)
P_value = 0
plot(graph)
number_motifs
#This function reads a graph file in a tabular format, finds motifs, randomize it and then calculates P-value
#The motifs of size 3,4 are significant in toyNetwork. not 5. L = 3 * length(no_cliques).
#non of the cliques of size 3,4 and 5 are significant in Ecoli.
library("igraph")
data.table = read.csv("/Users/Maryam/Desktop/biologicalNetwork.csv", header = FALSE, sep = "\t", fill = TRUE)
graph = graph.data.frame(data.table, directed=FALSE, vertices=NULL)
no_cliques = cliques(graph, min=5, max = 5)
number_motifs = length(no_cliques)
P_value = 0
plot(graph)
#L = as.integer(length(get.edgelist(graph))/10)
L = 2*length(get.edgelist(graph))
#L = 2 * length(length(get.edgelist(graph)))
for(i in 1:100){
g.random=rewire(graph, keeping_degseq(loops=TRUE, niter = L))
no_cliques_random = cliques(g.random, min=5, max = 5)
number_motifs_random = length(no_cliques_random)
if(number_motifs_random > number_motifs || number_motifs_random == number_motifs)
P_value = P_value + 1
print(c(i,number_motifs_random,P_value))
}
print(P_value)
###########################################
#  - TFMir  Project                       #
#  - TFMir  Demo test for the TFMIR script#
#  - 2014-10-1                            #
#  - Copyright: Mohamed Hamed             #
###########################################
#R programming environments:
#- R studio IDE
#- R version 2.12.0 (2010-10-15)
#-Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)
#-locale:   [1] C/en_US.UTF-8/C/C/C/C
###### setwd("/Library/WebServer/Documents/TFmiR/backend")
options(warn=1)
tf.path="./Data/genes.bc.diff.txt"
#mirna.path="mirna.sample.txt"
#tf.path=""
#tf.path="genes.bc.diff.txt"
mirna.path="./Data/mirna.bc.diff.txt"
#tf.path="/Users/Maryam/Desktop/prostate_mouse.txt"
#tf.path="Mouse_diabetes.txt"
#tf.path="genes.bc.diff_mouse.txt"
#mirna.path="mirna.bc.diff_mouse.txt"
#mirna.path=""
tissue = "Breast - Mammary Tissue"
#tissue="Testis"
#process="Cell differentiation"
processes = "cell death:Cell differentiation"
#process = "cell death"
#tissue=""
#mirna.path=""
#tissue = "Testis"
#tissue=Thyroid
#tf.path="genes.ad.diff.txt"
#mirna.path="mirna.ad.diff.txt"
#mirna.path=""
pval.cutoff=0.05
#disease="Melanoma"
#disease="Neoplasm"
#disease="halabessahbelzabadymolokhia"
disease="Breast Neoplasms"
#disease="Prostate Cancer"
#disease="Diabetes Mellitus"
#disease="Polycystic Liver Disease"
#disease="alzheimer"
#disease=""
output.path="output"
evidence="Experimental"
#evidence="Predicted"
#evidence="both"
enrich.pval = 0.5
species="Human"
#species="Mouse"
pp.cutoff = 0.8
random.method="conserved"
source("TFMIR.R")
start.time <- Sys.time()
TFMir(tf.path,mirna.path,enrich.pval,pval.cutoff,pp.cutoff,evidence,species,disease,processes,tissue,output.path)
end.time <- Sys.time()
time.taken.TFMir <- end.time - start.time
time.taken.TFMir
###To find 3-node and 4-node motifs in the networks###########
start.time <- Sys.time()
net.path="./output/disease/res.txt"
output.path="./output/disease"
ExportMotifs(net.path,output.path,evidence,species,random.method)
end.time <- Sys.time()
time.taken.TFMir <- end.time - start.time
time.taken.TFMir
###########################################
#  - TFMir  Project                       #
#  - TFMir  Demo test for the TFMIR script#
#  - 2014-10-1                            #
#  - Copyright: Mohamed Hamed             #
###########################################
#R programming environments:
#- R studio IDE
#- R version 2.12.0 (2010-10-15)
#-Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)
#-locale:   [1] C/en_US.UTF-8/C/C/C/C
###### setwd("/Library/WebServer/Documents/TFmiR/backend")
options(warn=1)
tf.path="./Data/genes.bc.diff.txt"
#mirna.path="mirna.sample.txt"
#tf.path=""
#tf.path="genes.bc.diff.txt"
mirna.path="./Data/mirna.bc.diff.txt"
#tf.path="/Users/Maryam/Desktop/prostate_mouse.txt"
#tf.path="Mouse_diabetes.txt"
#tf.path="genes.bc.diff_mouse.txt"
#mirna.path="mirna.bc.diff_mouse.txt"
#mirna.path=""
tissue = "Breast - Mammary Tissue"
#tissue="Testis"
#process="Cell differentiation"
processes = "cell death:Cell differentiation"
#process = "cell death"
#tissue=""
#mirna.path=""
#tissue = "Testis"
#tissue=Thyroid
#tf.path="genes.ad.diff.txt"
#mirna.path="mirna.ad.diff.txt"
#mirna.path=""
pval.cutoff=0.05
#disease="Melanoma"
#disease="Neoplasm"
#disease="halabessahbelzabadymolokhia"
disease="Breast Neoplasms"
#disease="Prostate Cancer"
#disease="Diabetes Mellitus"
#disease="Polycystic Liver Disease"
#disease="alzheimer"
#disease=""
output.path="output"
evidence="Experimental"
#evidence="Predicted"
#evidence="both"
enrich.pval = 0.5
species="Human"
#species="Mouse"
pp.cutoff = 0.8
random.method="conserved"
source("TFMIR.R")
start.time <- Sys.time()
TFMir(tf.path,mirna.path,enrich.pval,pval.cutoff,pp.cutoff,evidence,species,disease,processes,tissue,output.path)
end.time <- Sys.time()
time.taken.TFMir <- end.time - start.time
time.taken.TFMir
###To find 3-node and 4-node motifs in the networks###########
start.time <- Sys.time()
net.path="./output/disease/res.txt"
output.path="./output/disease"
ExportMotifs(net.path,output.path,evidence,species,random.method)
end.time <- Sys.time()
time.taken.TFMir <- end.time - start.time
time.taken.TFMir
###To find 3-node and 4-node motifs in the networks###########
start.time <- Sys.time()
net.path="./output/disease/res.txt"
output.path="./output/disease"
ExportMotifs(net.path,output.path,evidence,species,random.method)
end.time <- Sys.time()
time.taken.TFMir <- end.time - start.time
time.taken.TFMir
