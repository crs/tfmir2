{
    "contents" : "###########################################\n#  - TFMir  Project                       #\n#  - TFMir  Initialize and read files     #\n#  - 2014-10-1                            #\n#  - Copyright: Mohamed Hamed             #\n###########################################\n\n#R programming environments:\n#- R studio IDE\n#- R version 2.12.0 (2010-10-15)\n#-Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)\n#-locale:   [1] C/en_US.UTF-8/C/C/C/C\n\n\n## ========================================\n## Load the databases of interactions (dbs)\n## ========================================\nif(identical(speciesp,\"Human\")){\n#if(species==\"Human\"){\n  env=org.Hs.egALIAS2EG\n  symbol=\"hsa-\"\n  load(\"databases2_TFmiR_human.RDATA\")\n  #load(\"databases2.RDATA\")\n  #load(\"databases2_TFmiR_mentha.RDATA\")\n  #load(\"databases2_TFmiR_string.RDATA\")\n  #load(\"databases_human.RDATA\")\n}\n#if(species==\"Mouse\"){\nif(identical(speciesp,\"Mouse\")){\n  env=org.Mm.egALIAS2EG\n  symbol=\"mmu-\"\n  #load(\"databases_mouse.RDATA\")\n  #load(\"databases2_TFmiR_string_mouse.RDATA\")\n  #load(\"databases2_TFmiR_mentha_mouse.RDATA\")\n  load(\"databases2_TFmiR_mouse.RDATA\")\n}\n#load(\"databases2.RDATA\")\n\n#dbs=dbs[! (dbs$category==\"tf-gene\" & dbs$evidence==\"Predicted\"),]   # remove all predicted links\n##Maryam ==================================\n## read the gene.process.association and miRNA.process.association\n## ==================================\nmirna.process.association=read.delim(config$mirna.process.association.file,header=T,sep=\"\\t\")\nnames(mirna.process.association)=c(\"mirna\",\"mirna.process\")\nmirna.process.association=mirna.process.association[!duplicated(mirna.process.association),]\n\ngene.process.association=read.delim(config$gene.process.association.file,header=T,sep=\"\\t\")\nnames(gene.process.association)=c(\"gene\",\"gene.process\")\ngene.process.association=gene.process.association[!duplicated(gene.process.association),]\n##Maryam ==================================\n## read the gene.tissue.association\n## ==================================\ngene.tissue.association=read.delim(config$gene.tissue.network.association.file,header=T,sep=\"\\t\")\nnames(gene.tissue.association)=c(\"gene\",\"gene.tissue\")\ngene.tissue.association=gene.tissue.association[!duplicated(gene.tissue.association),]\ngetTissue_specificGenes = function(tissue.selected)\n{\n  genes.tissue = list()\n  gene.tissue.association = read.delim(config$gene.tissue.association.file)\n  tissue.option <- unique(as.character(unlist(gene.tissue.association$specific.tissue)))\n  genes.tissue = c()\n  for(i in 1:length(tissue.option)){\n    if(tissue.option[i]==tissue.selected){\n      genes.tissue <- gene.tissue.association[gene.tissue.association$specific.tissue==tissue.option[i],][1]\n    }\n  }\n  return(genes.tissue)\n}\n## read the gene.tissue..network.association\n## =========================================\ngene.tissue.network.association = read.delim(config$gene.tissue.network.association.file)\ntissue.option <- unique(as.character(unlist(gene.tissue.network.association$specific.tissue)))\ngenes.tissue = list()\n\n## ==================================\n## read the gene.disease.association\n## ==================================\n\ngene.disease.association=read.delim(config$gene.disease.association.file)\nnames(gene.disease.association)=c(\"gene\",\"gene.disease\")\ngene.disease.association=gene.disease.association[!duplicated(gene.disease.association),]\n\n# gene.disease.association.genecards=read.delim(config$gene.disease.association.file.genecard)\n# names(gene.disease.association.genecards)=c(\"gene\",\"gene.disease\")\n# gene.disease.association.disgenet=read.delim(config$gene.disease.association.file.disgenet)\n# gene.disease.association.disgenet=gene.disease.association.disgenet[,c(\"geneSymbol\",\"diseaseName\")]\n# names(gene.disease.association.disgenet)=c(\"gene\",\"gene.disease\")\n# gene.disease.association=rbind(gene.disease.association.genecards,gene.disease.association.disgenet)\n# gene.disease.association=gene.disease.association[!duplicated(gene.disease.association),]\n# gene.disease.association=gene.disease.association[order(gene.disease.association$gene),]\n\n## ==================================\n## read the mirna.disease.association\n## ==================================\n\nmirna.disease.association=read.delim(config$mirna.disease.association.file,header=F)\nmirna.disease.association=mirna.disease.association[,c(2,3)]\nnames(mirna.disease.association)=c(\"mirna\",\"mirna.disease\")\n\n## =====================================\n## read the mirna.disease.spectrum.width\n## =====================================\n\nmirna.dsw.association=read.delim(config$mirna.dsw.file,header=F,skip=16)\nnames(mirna.dsw.association)=c(\"mirna\",\"count\",\"mirna.dsw\")\nmirna.dsw.association=mirna.dsw.association[! duplicated(mirna.dsw.association$mirna),]\n\n## ===================================\n## read the mirna.function.association\n## ===================================\n\ncon <- file(config$mirna.function.association.file, \"r\", blocking = FALSE, )\nres=readLines(con) # empty\nclose(con)\nmirna.function.association=data.frame(\"mirna\"=character(),\"mirna.function\"=character()) \nfor(i in 11: length(res))\n{\n  s=res[i]\n  strs=strsplit(s,\"\\t\")\n  df=data.frame(mirna= strs[[1]][3:length(strs[[1]])])\n  df[\"mirna.function\"]=strs[[1]][2]\n  mirna.function.association=rbind(mirna.function.association,df)\n}\nmirna.function.association\nnames(mirna.function.association)\n\n## ===================================================\n## Export the combined list of gene and miRNA diseases\n## ===================================================\ndis.gene=unique(as.character(unlist(gene.disease.association$gene.disease)))\ndis.mirna=unique(as.character(unlist(mirna.disease.association$mirna.disease)))\ndis=unique(c(dis.gene,dis.mirna))\ndis=dis[order(dis)]\nwrite.table(dis,file=\"disease.txt\",quote=F,row.names=F,col.name=F)\n\n\n## =============================================================================\n## design a function that return the disease or the function of a specific mirna\n## =============================================================================\n\ngetMIRnaCategory=function(mirna,category)\n{\n  mirna.category=\" \"\n  \n  if(category==\"function\")\n  {\n    mirna.category= toString(unlist(mirna.function.association[mirna.function.association$mirna==mirna,]$mirna.function))\n    \n  }else if(category==\"disease\")\n  {\n    mirna.category= toString(unlist(mirna.disease.association[mirna.disease.association$mirna==mirna,]$mirna.disease))  \n  }\n  \n  return (mirna.category)\n}\n\ngetMIRna_DSW=function(mirna)\n{\n  mirna.dsw=0\n  number=mirna.dsw.association[mirna.dsw.association$mirna==mirna,]$mirna.dsw\n  if (length(number) >0){ \n    mirna.dsw=round(as.numeric((as.character(number))),digits=5)\n  }  \n  return(mirna.dsw)\n}\n\n\ngetGeneDiseases=function(gene)\n{\n  diseases= toString(unlist(gene.disease.association[gene.disease.association$gene==gene,]$gene.disease))\n  unique(diseases)\n}\n\n\ngetmiRNAforDisease=function(disease)\n{\n  mirnas=mirna.disease.association[agrep(disease,mirna.disease.association$mirna.disease,ignore.case=T),]$mirna\n  unique(as.character(mirnas))\n}\n\ngetGenesforDisease=function(disease)\n{\n  genes=gene.disease.association[agrep(disease,gene.disease.association$gene.disease,ignore.case=T),]$gene\n  unique(as.character(genes))\n}\n\ngetEntrezIDs =function(genes)\n{\n  genes.str=unlist(strsplit(genes,\",\"))\n  entrezids=toString(as.vector(unlist(mget(as.character(genes.str), envir=env, ifnotfound=NA))))\n  return(entrezids)\n}\n\nprintGeneEntrezIDsMap =function(genes,output.path)\n{\n  entrezids=mget(as.character(genes), envir=env, ifnotfound=NA)\n  genemap=data.frame(gene.symbol = rep(names(entrezids), lapply(entrezids, length)),gene.entrezid = unlist(entrezids))\n  genemap=genemap[! duplicated(genemap$gene.symbol),]  \n  write.table(genemap,file=file.path(output.path,\"genemap.txt\"),quote=F,row.names=F,col.names=T,sep=\"\\t\")\n}\ngetGeneTissues=function(gene)#not exported yet\n{\n  tissues= toString(unlist(gene.tissue.association[gene.tissue.association$gene==gene,]$gene.tissue))\n  unique(tissues)\n}\n\ngetGenesforTissue=function(tissue)\n{\n  genes=gene.tissue.association[agrep(tissue,gene.tissue.association$gene.tissue,ignore.case=T),]$gene\n  unique(as.character(genes))\n}\n\ngetGenesforProcess=function(process)\n{\n  genes = as.character()\n  for(p in process){\n    genes=union(genes,gene.process.association[agrep(p,gene.process.association$gene.process,ignore.case=T),]$gene)\n  }\n    unique(as.character(genes))\n}\n\ngetmiRNAforProcess=function(process)\n{\n  mirnas = c()\n  for(p in process){\n    mirnas = union(mirnas,mirna.process.association[agrep(p,mirna.process.association$mirna.process,ignore.case=T),]$mirna)\n  }\n    unique(as.character(mirnas))\n}\ngetInteractions=function(category,reg.input,target.input,process,tissue,disease,evidence,output.path,pval.cutoff)\n{\n  \n  db=dbs.all[dbs.all$category==category & dbs.all$evidence %in% evidence, ]\n  db.res=db[db$regulator %in% reg.input & db$target %in% target.input,]\n  reg.cat=strsplit(category,\"-\")[[1]][1]\n  target.cat=strsplit(category,\"-\")[[1]][2]  \n  \n  no.of.interactions.associated.with.input.tissue=0\n  no.of.interactions.associated.with.input.process=0\n  if( dim(db.res)[1] > 0) \n  {  \n   \n    db.res[\"is_regulator_in_tissue\"]=\"FALSE\"\n   db.res[\"is_target_in_tissue\"]=\"FALSE\"\n   if(! is.na(tissue) & tissue !=\"\")\n    {\n    genes.tissue=getGenesforTissue(tissue)\n    if(dim(db.res[db.res$regulator %in% genes.tissue,])[1] > 0)\n      db.res[db.res$regulator %in% genes.tissue,]$is_regulator_in_tissue=\"TRUE\"\n    if(dim(db.res[db.res$target %in% genes.tissue,])[1] > 0)\n      db.res[db.res$target %in% genes.tissue,]$is_target_in_tissue=\"TRUE\"\n    no.of.interactions.associated.with.input.tissue=dim(db.res[db.res$is_regulator_in_tissue==TRUE | db.res$is_target_in_tissue==TRUE , ])[1]\n    #print(no.of.interactions.associated.with.input.tissue)  \n   }\n   \n     db.res[\"is_regulator_in_process\"]=\"FALSE\"\n     db.res[\"is_target_in_process\"]=\"FALSE\"\n     #if(! is.na(process) & process !=\"\")\n     #{\n     if(length(process > 0)){\n       mirna.process=getmiRNAforProcess(process)\n       genes.process=getGenesforProcess(process)\n       #print(typeof(mirna.process))\n       #print(length(mirna.process))\n       #print(length(genes.process))\n       if(dim(db.res[db.res$regulator %in% mirna.process | db.res$regulator %in% genes.process,])[1] > 0)\n         db.res[db.res$regulator %in% mirna.process | db.res$regulator %in% genes.process,]$is_regulator_in_process=\"TRUE\"\n       if(dim(db.res[db.res$target %in% mirna.process | db.res$target %in% genes.process,])[1] > 0)\n         db.res[db.res$target %in% mirna.process | db.res$target %in% genes.process,]$is_target_in_process=\"TRUE\"\n       no.of.interactions.associated.with.input.process=dim(db.res[db.res$is_regulator_in_process==TRUE | db.res$is_target_in_process==TRUE , ])[1]\n      #print(no.of.interactions.associated.with.input.process)\n     }\n    output.path=file.path(output.path,category)\n    if  (! file.exists(output.path)){\n      dir.create(file.path(output.path))\n    }  \n   ## ===========================\n   ## get attributes of regulators\n   ## ===========================\n    if(reg.cat %in% c(\"tf\",\"gene\"))\n    {\n      for(i in 1: dim(db.res)[1])\n        {\n          reg=as.character(db.res[i,]$regulator)\n          db.res[i,\"regulator.association.disease\"]=getGeneDiseases(gene = reg)\n          #reg.entrez=as.vector(unlist(mget(as.character(reg), envir=org.Hs.egALIAS2EG, ifnotfound=NA)))\n          #if(length(reg.entrez) >1) reg.entrez=reg.entrez[1]\n          #db.res[i,\"regulator.david.report\"]=paste(\"http://david.abcc.ncifcrf.gov/api.jsp?type=ENTREZ_GENE_ID&ids=\", reg.entrez, \"&tool=geneReportFull\",sep=\"\")\n          db.res[i,\"regulator.genecard\"]=paste(\"http://www.genecards.org/cgi-bin/carddisp.pl?gene=\", reg,sep=\"\")    \n        }\n    }else{\n        for(i in 1: dim(db.res)[1])   ## regulator is mirna\n        {\n          reg=as.character(db.res[i,]$regulator)\n          db.res[i,\"regulator.association.disease\"]=getMIRnaCategory(mirna = reg,category = \"disease\")\n          db.res[i,\"regulator.association.function\"]=getMIRnaCategory(mirna = reg,category = \"function\")\n          db.res[i,\"regulator.dsw\"]=getMIRna_DSW(mirna = reg)\n        }\n      }\n      \n      ## ===========================\n      ## get attributes of targets\n      ## ===========================\n      if(target.cat %in% c(\"tf\",\"gene\"))    {\n        for(i in 1: dim(db.res)[1])\n        {\n          target=as.character(db.res[i,]$target)\n          db.res[i,\"target.association.disease\"]=getGeneDiseases(gene = target)\n          #db.res[i,\"target.david.report\"]=paste(\"http://david.abcc.ncifcrf.gov/api.jsp?type=ENTREZ_GENE_ID&ids=\", as.vector(unlist(mget(as.character(target), envir=org.Hs.egALIAS2EG, ifnotfound=NA))), \"&tool=geneReportFull\",sep=\"\")\n          db.res[i,\"target.genecard\"]=paste(\"http://www.genecards.org/cgi-bin/carddisp.pl?gene=\", target,sep=\"\")    \n        }\n      }else{   ##### target is mirna\n        for(i in 1: dim(db.res)[1])\n        {\n          target=as.character(db.res[i,]$target)\n          db.res[i,\"target.association.function\"]=getMIRnaCategory(mirna = target,category = \"function\")\n          db.res[i,\"target.association.disease\"]=getMIRnaCategory(mirna = target,category = \"disease\")\n          db.res[i,\"target.dsw\"]=getMIRna_DSW(mirna = target)\n        }\n      }\n      \n      \n      no.of.interactions.associated.with.input.disease=0\n      db.res[\"is_regulator_in_disease\"]=\"FALSE\"\n      db.res[\"is_target_in_disease\"]=\"FALSE\"\n      if(! is.na(disease) & disease !=\"\")\n      {\n        mirna.dis=getmiRNAforDisease(disease)\n        genes.dis=getGenesforDisease(disease)\n        if(dim(db.res[db.res$regulator %in% mirna.dis | db.res$regulator %in% genes.dis,])[1] > 0)\n          db.res[db.res$regulator %in% mirna.dis | db.res$regulator %in% genes.dis,]$is_regulator_in_disease=\"TRUE\"\n        if(dim(db.res[db.res$target %in% mirna.dis | db.res$target %in% genes.dis,])[1] > 0)\n          db.res[db.res$target %in% mirna.dis | db.res$target %in% genes.dis,]$is_target_in_disease=\"TRUE\"\n        \n        no.of.interactions.associated.with.input.disease=dim(db.res[db.res$is_target_in_disease==TRUE | db.res$is_regulator_in_disease==TRUE , ])[1]\n      }\n      \n      \n      write.table(db.res,file=file.path(output.path,\"res.txt\"), quote=F,row.names=F,col.names=T,sep=\"\\t\")    \n      \n      ## ==============================================================================\n      ## Venn Diagram and HYper geometric test / simualtion test and / permutation test\n      ## ==============================================================================\n      \n      alldys.targets.by.reg.inputs=as.character(unique(db[db$regulator %in% reg.input, ]$target))\n      overlap=intersect(tolower(target.input),tolower(alldys.targets.by.reg.inputs))\n      #   nodes=unique(c(as.vector(dbs$regulator),as.vector(dbs$targets)))\n      #   total.mirna=length(grep(\"hsa-\",nodes))\n      #   total.gene=length(nodes)-total.mirna\n      total.target=1\n      if(target.cat %in% c(\"tf\",\"gene\")){ \n        total.target=as.integer(config$Total.No.of.genes)   ### 30000 as by the gene database\n      } else{\n        total.target=as.integer(config$Total.No.of.miRNA)   ### 1881 as by the mirbase database\n      }\n      venndiagram.overlap.pval.simulation=overlapSignificance_By_simulation(total=total.target,numgA = length(alldys.targets.by.reg.inputs),numgB = length(target.input), overlap = length(overlap),no_of_simulation = as.integer(config$NO.of.simulation.for.overlap.significance))\n      #venndiagram.overlap.pval.python=overlapSignificance_By_Python(total=total.mirna,numgA = length(alldys.mirnas.by.tfs.inputs),numgB = length(mirnas.input), overlap = length(overlap))\n      venndiagram.overlap.pval.hypergeom=overlapSignificance_By_HyperGEOM(total=total.target,numgA = length(alldys.targets.by.reg.inputs),numgB = length(target.input),overlap = length(overlap))\n      \n      list=list(Regulators_Targets=alldys.targets.by.reg.inputs,Dereg_Targets =target.input)\n      plotColorVenn(list,file.path(output.path,\"venn.png\"),width=as.integer(config$venndiagram.width),hight=as.integer(config$venndiagram.hight))\n      Venn.image.path=file.path(output.path,\"venn.png\")\n      #   plotColorVennBar(list,file.path(output.path,\"vennbar.png\"),width=as.integer(config$venndiagram.width),hight=as.integer(config$venndiagram.hight))\n      #   Venn.bar.image.path=file.path(output.path,\"vennbar.png\")   \n      \n      db.res.nodes=unique(c(as.vector(db.res$regulator),as.vector(db.res$target)))\n      db.res.mirna=db.res.nodes[grep(symbol,db.res.nodes)]\n      #db.res.gene=db.res.nodes[- grep(\"hsa-\",db.res.nodes)]\n      db.res.gene=setdiff(db.res.nodes,db.res.mirna)\n      \n      if((target.cat ==\"mirna\" | reg.cat ==\"mirna\"  ) & length(db.res.mirna) > 0)\n      {\n        ## =========================================\n        ## ORA analysis of the miRNAs in the results \n        ## =========================================\n        mirna.res.ora.function=DO_ORA_FOR_MIRNA(db.res.mirna,category=\"function\",pval.cutoff=pval.cutoff)\n        mirna.res.ora.disease=DO_ORA_FOR_MIRNA(db.res.mirna,category=\"disease\",pval.cutoff = pval.cutoff)\n        mirna.res.ora=rbind(mirna.res.ora.function, mirna.res.ora.disease)\n        if(dim(mirna.res.ora)[2] == 1)\n          mirna.res.ora = data.frame(\"Category\"=\"NA\",\"Term\"=\"NA\",\"Count\"=\"NA\",\"Mir\"=\"NA\",\"Percentage\"=\"NA\",\"Pval\"=\"NA\",\"Pval.BH\"=\"NA\",\"Pval.Bonf\"=\"NA\")\n        #mirna.res.ora=c()\n        write.table(mirna.res.ora,file=file.path(output.path,\"mirna.ora.txt\"), quote=F,row.names=F,col.names=T,sep=\"\\t\")    \n      }\n      ## =========================================\n      ## ORA analysis of the genes in the results \n      ## =========================================\n      db.res.gene.etrezID=toString(as.vector(unlist(mget(as.character(db.res.gene), envir=env, ifnotfound=NA))))\n      david.BP=paste(\"http://david.abcc.ncifcrf.gov/api.jsp?type=ENTREZ_GENE_ID&ids=\",db.res.gene.etrezID,\",&tool=chartReport&annot=GOTERM_BP_ALL\",sep=\"\")\n      david.KEGG=paste(\"http://david.abcc.ncifcrf.gov/api.jsp?type=ENTREZ_GENE_ID&ids=\",db.res.gene.etrezID,\",&tool=chartReport&annot=KEGG_PATHWAY\",sep=\"\")\n      david.OMIM=paste(\"http://david.abcc.ncifcrf.gov/api.jsp?type=ENTREZ_GENE_ID&ids=\",db.res.gene.etrezID,\",&tool=chartReport&annot=OMIM_DISEASE\",sep=\"\")    \n      david.functional.clust=paste(\"http://david.abcc.ncifcrf.gov/api.jsp?type=ENTREZ_GENE_ID&ids=\",db.res.gene.etrezID,\",&tool=term2term&annot=GOTERM_BP_ALL\",sep=\"\")    \n      \n      ## ======================================\n      ## print the results to the output folder\n      ## ======================================\n      summary.file=file.path (output.path,\"summary.txt\")\n      \n      write(paste(\"Category.of.Interactions=\",category,sep=\"\"),      file=summary.file,append=F,sep=\"\\n\")\n      write(paste(\"Evidence=\",toString(evidence),sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n      write(paste(\"Target.input.set=\",length(target.input),sep=\"\"),  file=summary.file,append=T,sep=\"\\n\")\n      write(paste(\"Regulator.input.set=\",length(reg.input),sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n      write(paste(\"ORA.pval.cutoff=\",pval.cutoff,sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n      write(paste(\"Total.Targets.inDb=\",length(unique(unlist(db$target))),sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n      write(paste(\"Total.Regulators.inDb=\",length(unique(unlist(db$regulator))),sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n      write(paste(\"Deregulated.targets.by.inputRegulator=\",length(alldys.targets.by.reg.inputs),sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n      write(paste(\"Deregulated.targets.of.inputRegulator.and.in.input.targetlist.overlap=\",length(overlap),sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n      write(paste(\"no.of.resultant.interactions=\",dim(db.res)[1],sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")    \n      write(paste(\"no.of.interactions.associated.with.input.disease=\",no.of.interactions.associated.with.input.disease,sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")  \n      #write(paste(\"total.mirna.inDb=\",length(unique(transmir$mirna)),sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n      write(paste(\"venn.pval.hypergeom=\",venndiagram.overlap.pval.hypergeom,sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n      write(paste(\"venn.pval.simulation=\",venndiagram.overlap.pval.simulation,sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n      write(paste(\"Venn.image.path=\",Venn.image.path,sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n      #  write(paste(\"Venn.bar.image.path=\",Venn.bar.image.path,sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n      \n      if(target.cat %in% c(\"tf\",\"gene\") | reg.cat %in% c(\"tf\",\"gene\")  )\n      {\n        summary.file=file.path (output.path,\"genes.ora.txt\")\n        write(db.res.gene.etrezID,file=summary.file,append=F,sep=\"\\n\")\n        \n        #write(paste(\"david.BP.link=\",david.BP,sep=\"\"),      file=summary.file,append=F,sep=\"\\n\")\n        #write(paste(\"david.KEGG.link=\",david.KEGG,sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n        #write(paste(\"david.OMIM.link=\",david.OMIM,sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n        #write(paste(\"david.functional.clust.link=\",david.functional.clust,sep=\"\"),  file=summary.file,append=T,sep=\"\\n\")\n      }\n      return (db.res)\n  }  \n\n  rest.columns=data.frame(regulator.association.disease=character(),target.association.disease=character(),\n                          is_regulator_in_disease=numeric(),is_target_in_disease=numeric(),is_regulator_in_tissue=numeric(),is_target_in_tissue=numeric()\n                          ,is_regulator_in_process=numeric(),is_target_in_process=numeric())\n  return (cbind(db.res,rest.columns ))                \n}        \n\"\ngetTissueNetworkGene = function(tissue.selected)\n{\n  genes.tissue = c()\n  for(i in 1:length(tissue.option)){\n    if(tissue.option[i] == tissue.selected){\n      genes.tissue <- gene.tissue.network.association[gene.tissue.network.association$specific.tissue==tissue.option[i],][2]\n    }\n  }\n  return(genes.tissue)\n}\n#all.res.tissue.reg = intersect(all.res$regulator,tissue.specific.gene$regulator)\n    #all.res.tissue.target = intersect(all.res$target,tissue.specific.gene$regulator)\n    #all.res.tissue.specific = union(as.list(all.res.tissue.reg),as.list(all.res.tissue.target))\n    \n    #all.res.disease.tissue.reg = intersect(all.res.disease$regulator,tissue.specific.gene$regulator)\n    #all.res.disease.tissue.target = intersect(all.res.disease$target,tissue.specific.gene$regulator)\n    #all.res.disease.tissue.specific = union(as.list(all.res.disease.tissue.reg),as.list(all.res.disease.tissue.target))\n    \n    #all.res.normal.tissue.reg = intersect(all.res.tissue$regulator,tissue.specific.gene$regulator)\n    #all.res.normal.tissue.target = intersect(all.res.tissue$target,tissue.specific.gene$regulator)\n    #all.res.normal.tissue.specific = union(as.list(all.res.normal.tissue.reg),as.list(all.res.normal.tissue.target))\n    \n    #all.res.process.tissue.reg = intersect(all.res.process$regulator,tissue.specific.gene$regulator)\n    #all.res.process.tissue.target = intersect(all.res.process$target,tissue.specific.gene$regulator)\n    #all.res.process.tissue.specific = union(as.list(all.res.process.tissue.reg),as.list(all.res.process.tissue.target))\n\"\n",
    "created" : 1478688086537.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "119029432",
    "id" : "29CBF7F",
    "lastKnownWriteTime" : 1478688119,
    "path" : "/Library/WebServer/Documents/TFmiR/backend/initialize.R",
    "project_path" : "initialize.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}