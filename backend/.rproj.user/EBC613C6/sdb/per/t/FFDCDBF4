{
    "contents" : "###########################################\n#  - TFMir  Project                       #\n#  - TFMir  main function                 #\n#  - Main function to be called           #\n#  - 2014-10-1                            #\n#  - Copyright: Mohamed Hamed             #\n###########################################\nstart.time <- Sys.time()\n#R programming environments:\n#- R studio IDE\n#- R version 2.12.0 (2010-10-15)\n#-Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)\n#-locale:   [1] C/en_US.UTF-8/C/C/C/C\nsetwd(\"/Library/WebServer/Documents/TFmiR/backend\")\n\n## =============================================================================\n## Initialize calling required packages and install them if they are not and log\n## =============================================================================\n\nsource(\"loadpackages.R\")\n\n\n## ==================================================\n## read the configuration file and get the parameters \n## ==================================================\n\n#source(\"readconfig.R\")\n#config\n\n## ===================================================\n## Load the statistics ,color venn, and grapth scripts\n## ===================================================\nsource(\"statistics.R\")\nsource(\"ColorVenn.R\")\n\n#source(\"graph.R\")\n#source(\"initialize.R\")\n\n  \n\n## =============================================================================================================================\n## Intialize and Read all files in config file (tranmir db , mirna disease association file and mirna function association file)\n## =============================================================================================================================\n\n#source(\"initialize.R\")\n#source(\"initialize_tissue.R\")\n#getMIRnaCategory(\"hsa-mir-212\",\"function\")\n#getMIRnaCategory(\"hsa-mir-212\",\"disease\")\n\n## ===============================\n## call the main function of TFMir\n## ===============================\n\nreadInput=function(path)\n{\n  molecule.df = read.delim(path, header=FALSE)\n  molecule.df=molecule.df[!duplicated (molecule.df),]\n  molecule.input=unique(as.character(unlist(molecule.df[1]))) \n  return(molecule.input)\n}\nend.time <- Sys.time()\ntime.taken.packages <- end.time - start.time\ntime.taken.packages\n\nstart.time <- Sys.time()\n#speciesp = \"Human\"\nTFMir =function(tf.path, mirna.path,enrich.pval,pval.cutoff=0.05,pp.cutoff,evidence,species,disease=\"\",processes=\"\", tissue=\"\", output.path)\n{\n  process= unlist(strsplit(processes, split=\":\"))\n  speciesp <<- species;\n  source(\"readconfig.R\")\n  config\n  if(pp.cutoff != 0.8){\n    pp.cutoffp <<-pp.cutoff;\n    source(\"Database_construct.R\")\n  }\n  #config\n  source(\"graph.R\")\n  source(\"initialize.R\")\n#     tf.path=\"tf.sample2.txt\"\n#     mirna.path=\"mirna.sample.txt\"\n#     mirna.path=\"\"\n#     pval.cutoff=0.05\n#     disease=\"Melanoma\"\n#    disease=\"Neoplasm\"\n#     disease=\"Alzheimer Disease\"\n#     disease=\"\"\n#     output.folder=\"output\"\n#     evidence=\"Experimental\"\n#     evidence=\"Predicted\"\n#     evidence=\"both\"\n# \n#   \n  ## ========================\n  ## log the input parameters \n  ## ========================  \n  writeToLog(tf.path)\n  writeToLog(mirna.path)\n  writeToLog(pval.cutoff)\n  writeToLog(disease)\n  writeToLog(evidence)\n  writeToLog(output.path)\n  writeToLog(\"=====================================\")\n  \n  if(tolower(evidence)==\"both\") { evidence=c(\"Experimental\",\"Predicted\") }\n\n  ## ==================================================================\n  ## read the input files and test automatically which scenario will be\n  ## ==================================================================\n  tfs.df=data.frame(\"gene\"=character(),\"gene.reg\"=numeric())\n  if(! is.na(tf.path) & tf.path !=\"\")\n  {\n    tfs.df = read.delim(tf.path, header=FALSE)    \n  }else\n  {\n    mirnas.input=unique(tolower(readInput(mirna.path)))\n    config$pval.cutoffgene.targets_regulators.fromMiRNA.inputlist = enrich.pval\n    tf.pval=as.double(config$pval.cutoffgene.targets_regulators.fromMiRNA.inputlist)\n    tfs.regulatorsofMiRNA= getTFsRegulatorsofMiRNAs(mirnas.input,tf.pval,evidence)\n    tfs.targetsofMiRNA= getTFsTargetsofMiRNAs(mirnas.input,tf.pval,evidence)\n    tfs.list=unique(c(tfs.targetsofMiRNA,tfs.regulatorsofMiRNA))\n    if(length(tfs.list) > 0){\n      tfs.df=data.frame(\"gene\"=tfs.list,\"gene.reg\"=0) }\n  }\n  names(tfs.df)=c(\"gene\",\"gene.reg\")\n  tfs.df=tfs.df[!duplicated (tfs.df),]\n  tfs.input=unique(as.character(unlist(tfs.df$gene)))\n  #printGeneEntrezIDsMap(tfs.input,output.path)\n  #print(tfs.input)\n\n  \n  \n  \n  \n  mirnas.df=data.frame(\"mirna\"=character(),\"mirna.reg\"=numeric())\n  if(! is.na(mirna.path) & mirna.path !=\"\")\n  {\n    mirnas.df = read.delim(mirna.path, header=FALSE)    \n  }else\n  {\n    config$pval.cutoffmirna.regulators_targets.fromTFS.inputlist = enrich.pval\n    mirna.pval=as.double(config$pval.cutoffmirna.regulators_targets.fromTFS.inputlist)\n    tfstargets.mirna= getMiRNAsTargetsofTFs(tfs.input,mirna.pval,evidence)\n    tfsregulators.mirna= getMiRNAsRegulatorsofTFs(tfs.input,mirna.pval,evidence)\n    mirnas.list=unique(c(tfstargets.mirna,tfsregulators.mirna))\n    if(length(mirnas.list) > 0){\n    mirnas.df=data.frame(\"mirna\"=mirnas.list,\"mirna.reg\"=0) }\n  }\n  names(mirnas.df)=c(\"mirna\",\"mirna.reg\")\n  mirnas.df$mirna=tolower(mirnas.df$mirna)\n  mirnas.df=mirnas.df[!duplicated (mirnas.df),]\n  mirnas.input=unique(as.character(unlist(mirnas.df$mirna)))  \n  #print(mirnas.input)\n  \n  ## ==================================\n  ## get the five kinds of interactions \n  ## ==================================\n  tf.mirna.res=getInteractions(category=\"tf-mirna\",reg.input=tfs.input,target.input=mirnas.input,process=process,tissue=tissue,disease=disease,evidence=evidence,output.path=output.path,pval.cutoff=pval.cutoff)    \n  tf.gene.res=getInteractions(category=\"tf-gene\",reg.input=tfs.input,target.input=tfs.input,process=process,tissue=tissue,disease=disease,evidence=evidence,output.path=output.path,pval.cutoff=pval.cutoff)  \n  #mirna.gene.res=tf.mirna.res[tf.mirna.res$category==\"mirna-mirna\",]  # return initial empty structure\n  mirna.gene.res=getInteractions(category=\"mirna-gene\",reg.input=mirnas.input,target.input=tfs.input,process=process,tissue=tissue,disease=disease,evidence=evidence,output.path=output.path,pval.cutoff=pval.cutoff)\n  gene.gene.res=getInteractions(category=\"gene-gene\",reg.input=tfs.input,target.input=tfs.input,process=process,tissue=tissue,disease=disease,evidence=evidence,output.path=output.path,pval.cutoff=pval.cutoff)\n  mirna.mirna.res=tf.mirna.res[tf.mirna.res$category==\"mirna-mirna\",]  # return initial empty structure\n  if(\"Predicted\" %in% evidence)   ## cause mirna-mirna interacctions are only predictions\n    mirna.mirna.res=getInteractions(category=\"mirna-mirna\",reg.input=mirnas.input,target.input=mirnas.input,process=process,tissue=tissue,disease=disease,evidence=evidence,output.path=output.path,pval.cutoff=pval.cutoff)\n  \n  ## ======================================================================================================================\n  ## Combine these interactions and get those related to disease only (disease speccific network) (if disease is specified)\n  ## ======================================================================================================================\n  input=list( tf.genes=names(tf.gene.res), mirna.genes=names(mirna.gene.res),tf.mirna=names(tf.mirna.res),mirna.mirna=names(mirna.mirna.res),gene.gene=names(gene.gene.res))\n  columns=Reduce(intersect,input)\n  all.res=rbind(tf.mirna.res[,columns],mirna.mirna.res[,columns],mirna.gene.res[,columns],tf.gene.res[,columns],gene.gene.res[,columns])\n\n  names(mirnas.df)=c(\"node\",\"regulation\")\n  names(tfs.df)=c(\"node\",\"regulation\")\n  nodes.input=rbind(mirnas.df,tfs.df)\n  names(nodes.input)=c(\"target\",\"target.reg\")\n  all.res=merge(all.res,nodes.input,by=\"target\")\n  names(nodes.input)=c(\"regulator\",\"regulator.reg\")\n  all.res=merge(all.res,nodes.input,by=\"regulator\")\n  \n  all.res.disease=all.res[all.res$is_regulator_in_disease==TRUE | all.res$is_target_in_disease==TRUE,]\n  #write(\"finished\", file=file.path(output.path,\"finished.txt\"),append=F,sep=\"\\n\")\n  \n  ## =================================================================================================\n  ## Combine the interactions and get those related to tissue only (tissue speccific network) \n  ## =================================================================================================\n  all.res.tissue=all.res[all.res$is_regulator_in_tissue==TRUE & all.res$is_target_in_tissue==TRUE,]\n  #print(all.res.tissue)\n  \n ## =================================================================================================\n ## Combine the interactions and get those related to tissue only (tissue speccific network) \n ## =================================================================================================\n all.res.process=all.res[all.res$is_regulator_in_process==TRUE | all.res$is_target_in_process==TRUE,]\n#print(all.res.process)\n\n## =================================================================================================\n## Combine the interactions and get those related to disease and process only  \n## =================================================================================================\nall.res.disease.process=all.res[(all.res$is_regulator_in_process==TRUE & all.res$is_target_in_disease==TRUE)\n                                | (all.res$is_regulator_in_disease==TRUE & all.res$is_target_in_process==TRUE),] \n#print(all.res.disease.process)\n\n## =================================================================================================\n## Combine the interactions and get those related to tissue and process only  \n## =================================================================================================\nall.res.tissue.process=all.res[(all.res$is_regulator_in_process==TRUE & all.res$is_target_in_tissue==TRUE)\n                                | (all.res$is_regulator_in_tissue==TRUE & all.res$is_target_in_process==TRUE),] \n#print(all.res.tissue.process)\n\n  ## ===================================================================\n  ## get tissue specific genes for disease and tissue and full networks.\n  ## ===================================================================\n  #tissue = \"Brain - Cerebellum\"\n  all.res.tissue.specific = list()\n  all.res.disease.tissue.specific = list()\n  all.res.normal.tissue.specific = list()\n  all.res.process.tissue.specific = list()\n  all.res.tissue.process.tissue.specific = list()\n  all.res.disease.process.tissue.specific = list()\n  tissue.specific.gene = list()\n  tissue.specific.gene = getTissue_specificGenes(tissue)\n  names(tissue.specific.gene) = \"regulator\"\n  if(dim(tissue.specific.gene)[1] > 0){\n    all.res.tissue.specific = union(intersect(all.res$regulator,tissue.specific.gene$regulator),intersect(all.res$target,tissue.specific.gene$regulator))\n    all.res.disease.tissue.specific = union(intersect(all.res.disease$regulator,tissue.specific.gene$regulator),intersect(all.res.disease$target,tissue.specific.gene$regulator))\n    all.res.normal.tissue.specific = union(intersect(all.res.tissue$regulator,tissue.specific.gene$regulator),intersect(all.res.tissue$target,tissue.specific.gene$regulator))\n    all.res.process.tissue.specific = union(intersect(all.res.process$regulator,tissue.specific.gene$regulator),intersect(all.res.process$target,tissue.specific.gene$regulator))\n    all.res.disease.process.tissue.specific = union(intersect(all.res.disease.process$regulator,tissue.specific.gene$regulator),intersect(all.res.disease.process$target,tissue.specific.gene$regulator))\n  }\n  if(length(all.res.tissue.specific) > 0){\n    all.res.tissue.specific = toString(all.res.tissue.specific)\n  }\n\n  if(length(all.res.disease.tissue.specific) > 0){\n    all.res.disease.tissue.specific = toString(all.res.disease.tissue.specific)\n  }\n  if(length(all.res.normal.tissue.specific) > 0){\n    all.res.normal.tissue.specific = toString(all.res.normal.tissue.specific)\n  }\n  if(length(all.res.process.tissue.specific) > 0){\n    all.res.process.tissue.specific = toString(all.res.process.tissue.specific)\n  }\n  if(length(all.res.disease.process.tissue.specific) > 0){\n    all.res.disease.process.tissue.specific = toString(all.res.disease.process.tissue.specific)\n  }\n\n  if(dim(all.res)[1] > 0)\n    exportNetworkProperties (all.res,file.path(output.path,\"all\"), disease,pval.cutoff,all.res.tissue.specific)\n  \n  if(dim(all.res.disease)[1] > 0)\n    exportNetworkProperties (all.res.disease,file.path(output.path,\"disease\"),disease,pval.cutoff,all.res.disease.tissue.specific)\n\n  if(dim(all.res.tissue)[1] > 0)\n    exportNetworkProperties (all.res.tissue,file.path(output.path,\"tissue\"),disease,pval.cutoff,all.res.normal.tissue.specific)\n  \n  if(dim(all.res.process)[1] > 0)\n    exportNetworkProperties (all.res.process,file.path(output.path,\"process\"),disease,pval.cutoff,all.res.process.tissue.specific)\n  \n  if(dim(all.res.disease.process)[1] > 0)\n    exportNetworkProperties (all.res.disease.process,file.path(output.path,\"disease_process\"),disease,pval.cutoff,all.res.disease.process.tissue.specific)\n  \n  if(dim(all.res.tissue.process)[1] > 0)\n    exportNetworkProperties (all.res.tissue.process,file.path(output.path,\"tissue_process\"),disease,pval.cutoff,all.res.tissue.process.tissue.specific)\nwrite(\"finished\", file=file.path(output.path,\"finished.txt\"),append=F,sep=\"\\n\")\n}\n\nExportMotifs =function(net.path,output.path,evidence,species)\n{ \n  #species=\"Human\"\n  speciesp <<- species;\n  source(\"readconfig.R\")\n  config\n  #config\n  source(\"graph.R\")\n  source(\"initialize.R\")\n  net=read.delim(net.path, header=TRUE) \n  if(tolower(evidence)==\"both\") { evidence=c(\"Experimental\",\"Predicted\") }\n  \n  #### extract all putative Tf-mirna paris who share target genes\n  tfmir.pairs=getPutativeTFmiRPairs(net)\n  #### extract all significant TF - miRNA pairs\n  #tfmir.pairs=getSignificantTFmiRpairs(tfmir.pairs,evidence)\n  \n  if(dim(tfmir.pairs)[1] >0) \n  {\n    #### relax and message the TF mir pairs who have more than one target\n    tfmir.pairs=relaxMultipleTargetsForTFmiRPairs(tfmir.pairs)\n    #### get motif type 1 : composite-FFL\n    motifs.composite= getMotifs.composite(tfmir.pairs,net)\n    print(\"End of motifs.composite:\")\n    #### get motif type 2 : TF-FFL\n    motifs.TF.FFL= getMotifs.TF.FFL(tfmir.pairs,net)\n    print(\"End of motifs.TF.FFL:\")\n    #### get motif type 3 : miRNA-FFL\n    motifs.miRNA.FFL= getMotifs.miRNA.FFL(tfmir.pairs,net)\n    print(\"End of motifs.miRNA.FFL:\")\n    #### get motif type 4 : Coregulation-FFL\n    motifs.coregulation= getMotifs.coregulation(tfmir.pairs,net)\n    print(\"End of motifs.coregulation:\")\n    motifs.FFL=rbind(motifs.composite,motifs.TF.FFL,motifs.miRNA.FFL,motifs.coregulation)\n    #if( dim(motifs)[1] > 0 )\n    #{\n      #motifs.ids=paste(\"motif\",seq(1:dim(motifs)[1]), sep=\"\" )\n      #motifs=cbind(motifs.ids,motifs)\n      #write.table(motifs,file=file.path(output.path,\"motifs.txt\"),quote=F,row.names=F,col.names=T,sep=\"\\t\")\n    #}\n  }\n    ###change the net.path from res.txt to res.4node.txt which is necessary for 4node-motifs \n    A = net.path\n    A=strsplit(A,\"/\")\n    AF = strsplit(A[[1]][length(A[[1]])],\"\\\\.\")\n    AF[[1]][length(AF[[1]])]=paste(AF[[1]][length(AF[[1]])-1],\".4node.txt\",sep=\"\")\n    A[[1]][length(A[[1]])] = AF[[1]][length(AF[[1]])]\n    B=c()\n    B=A[[1]][1]\n    for(i in 2:length(A[[1]])){\n      B=paste(B,\"/\",A[[1]][i],sep=\"\")\n    }\n    net.path.4node = B\n    ####\n    net=read.delim(net.path.4node, header=TRUE) \n    #### extract all putative Tf-mirna paris who share target genes\n    tfmir.pairs.tf.mirna=getPutativeTFmiRPairs4Node_tf_mirna(net)\n    tfmir.pairs.tf=getPutativeTFmiRPairs4Node_tf(net)\n    tfmir.pairs.mirna=getPutativeTFmiRPairs4Node_mirna(net)\n    tfmir.pairs.gene.gene=getPutativeTFmiRPairs4Node(net)\n  \n    tfmir.pairs = list(tfmir.pairs.tf.mirna,tfmir.pairs.tf,tfmir.pairs.mirna,tfmir.pairs.gene.gene)\n    if(length(tfmir.pairs) >0) \n    {\n      #print(\"Begin of motifs.composite:\")\n      motifs = c()\n      motifs= get4NodeMotifs.FFL(tfmir.pairs,net)\n      #print(\"End of motifs.composite:\")\n      if( length(motifs) > 0 ){\n        motifs.FFL = rbind(motifs.FFL,motifs)\n      }\n      print(c(\"motifs.FFL\",length(motifs.FFL)))\n      if( length(motifs.FFL) > 0 )\n      {\n        motifs.ids=paste(\"motif\",seq(1:dim(motifs.FFL)[1]), sep=\"\")\n        #print(motifs.ids)\n        motifs.FFL=cbind(motifs.ids,motifs.FFL)\n        write.table(motifs.FFL,file=file.path(output.path,\"motifs.txt\"),quote=F,row.names=F,col.names=T,sep=\"\\t\")\n      }\n      write(\"finished motifs 4 nodes\", file=file.path(output.path,\"finished4Nodemotifs.txt\"),append=F,sep=\"\\n\")  \n    }  \n}\nExport4NodeMotifs =function(net.path,output.path,evidence,species)\n{\n  #species=\"Human\"\n  speciesp <<- species;\n  source(\"readconfig.R\")\n  config\n  #config\n  source(\"graph.R\")\n  source(\"initialize.R\")\n  \n  net=read.delim(net.path, header=TRUE) \n  if(tolower(evidence)==\"both\") { evidence=c(\"Experimental\",\"Predicted\") }\n  \n  #### extract all putative Tf-mirna paris who share target genes\n  tfmir.pairs.tf.mirna=getPutativeTFmiRPairs4Node_tf_mirna(net)\n  tfmir.pairs.tf=getPutativeTFmiRPairs4Node_tf(net)\n  tfmir.pairs.mirna=getPutativeTFmiRPairs4Node_mirna(net)\n  tfmir.pairs.gene.gene=getPutativeTFmiRPairs4Node(net)\n  \n  \n  tfmir.pairs = list(tfmir.pairs.tf.mirna,tfmir.pairs.tf,tfmir.pairs.mirna,tfmir.pairs.gene.gene)\n  if(length(tfmir.pairs) >0) \n  {\n    motifs.FFL= get4NodeMotifs.FFL(tfmir.pairs,net)\n    if( length(motifs.FFL) > 0 )\n    {\n      motifs.ids=paste(\"motif\",seq(1:dim(motifs.FFL)[1]), sep=\"\")\n      motifs.FFL=cbind(motifs.ids,motifs.FFL)\n      write.table(motifs.FFL,file=file.path(output.path,\"motifs.txt\"),quote=F,row.names=F,col.names=T,sep=\"\\t\")\n    }\n    else\n      write.table(\"No motifs found\",file=file.path(output.path,\"motifs.txt\"),quote=F,row.names=F,col.names=T,sep=\"\\t\")\n    write(\"finished motifs 4 nodes\", file=file.path(output.path,\"finished4Nodemotifs.txt\"),append=F,sep=\"\\n\")  \n  }\n}\nPlotFunctionalSimilarity=function(genes,output.path)\n{\n###### @christian : these commented lines for testing only. u can try them urself\n#   genes=\"ESR1, TP53, GRIN2D, AGER, AKT1, TERT, NCOA2, BBC3\"\n#   genes=\"CREB1, LTC4S, TLR9, IL5RA, MCAM, RPL10, RPS3A, ME2, CXCR4, SLC6A4, ERF, ID1, FLII, TGFB1, FLI1, UBE2I, PPRC1, CDC37, LRRFIP1, TGIF1, JAG1, TP53BP2, MSH6, MSH2\"\n#   genes=\"CREB1, RPL10, CXCR4, ID1, TGFB1, UBE2I, LRRFIP1, TGIF1, JAG1, TP53BP2, MSH6, MSH2\"\n#   genes=\"ESR1, TP53, GRIN2D, AGER, AKT1, TERT, NCOA2, BBC3\"\n#   genes=\"SPI1, BACH1, GNA13, SACM1L, FLI1, RAB23, POLE4, MSH2, SERTAD2, SKI, PHC2, ATP6V1C1, MSH6, DHX40, DPP7, RCN2, CHAF1A, PKN2, MECP2, ARL5B, MYO1E, B2M, TYROBP, FLII, MSR1, P2RY10, WAS\"\n#   genes=\"SPI1, BACH1, GNA13, SACM1L, FLI1, RAB23, POLE4, MSH2, SERTAD2, SKI, PHC2, ATP6V1C1, MSH6, DHX40, DPP7, RCN2, CHAF1A, PKN2, MECP2, ARL5B, MYO1E, B2M, TYROBP, FLII, MSR1, P2RY10, WAS\"\n#   output.path=\"output/disease/funsim.png\"\n#   ############################################\n  \n  print(output.path)\n\n  genes=as.vector(unlist(strsplit(genes,\",\")))\n  dput(genes)\n  genes.entrez=unique(as.vector(unlist(mget(as.character(genes), envir=org.Hs.egALIAS2EG, ifnotfound=NA))))\n  gosem=mgeneSim(genes.entrez,organism=\"human\",measure=\"Wang\")#,ont=\"BP\"\n  gosem=gosem[upper.tri(gosem)]\n  \n  all.entrez.genes <- mappedkeys(org.Hs.egACCNUM)\n  #pvals.ks=c()\n  #pvals.t=c()\n  #pvals.wc=c()\n  gosem.random.vector=c()\n  for(i in 1: as.integer(config$NO_OF_random_permutations_for_functional_similarity))\n  {\n    genes.random=sample(all.entrez.genes,length(genes.entrez),replace = FALSE)\n    gosem.random=mgeneSim(genes.random,organism=\"human\",measure=\"Wang\")#,ont=\"BP\"\n    gosem.random=gosem.random[upper.tri(gosem.random)]\n    gosem.random.vector=c(gosem.random.vector,gosem.random)\n    #     if(length(gosem.random)>1)\n    #     {\n    #       pvals.ks=c(pvals.ks,ks.test(gosem,gosem.random,alternative=\"l\")$p.value)\n    #       pvals.wc=c(pvals.wc,wilcox.test(gosem,gosem.random,alternative=\"g\")$p.value)\n    #       pvals.t=c(pvals.t,t.test(gosem,gosem.random,alternative=\"g\")$p.value)      \n    #     }\n  }  \n  #   pval.t.final= (length(pvals.t[pvals.t > 0.05]) /  length(pvals.t))\n  #   pval.ks.final= (length(pvals.ks[pvals.ks > 0.05]) /  length(pvals.ks))\n  #   pval.wc.final= (length(pvals.wc[pvals.wc > 0.05]) /  length(pvals.wc))\n  #   pval=min(median(pvals.t),median(pvals.wc),median(pvals.ks))\n  gosem.random.forplot=sample(gosem.random.vector,length(gosem))\n  pval=ks.test(gosem,gosem.random.forplot,alternative=\"l\")$p.value\n  \n  \n  CairoPNG(bg=\"transparent\",output.path,width=as.integer(config$funsimilarity.diagram.width),height=as.integer(config$funsimilarity.diagram.height))\n  plot(ecdf(gosem),col=\"red\", xlim=range(c(gosem, gosem.random.forplot)) , main=\"\",xlab=\"Pair-wise similarity score\", ylab=\"Cumulative distribution\")\n  #lines(ecdf(gosem),col=\"red\",type=\"l\")\n  grid()\n  lines(ecdf(gosem.random.forplot))\n  #text(0.9,0.05, col=\"blue\", paste(\"P-value < \",round(pval,4) ,sep=\"\"),cex=1, adj = c(0.5, 0.5))\n  text(0.9,0.05, col=\"blue\", paste(\"P-value < \",format(pval, scientific = TRUE,digits=2) ,sep=\"\"),cex=0.8, adj = c(0.5, 0.5))\n  #mtext(paste(\"P-value < \",round(pval,3) ,sep=\"\"), adj = 1,col=\"blue\")\n  legend(bty=\"n\",\"topleft\",c(\"Motif genes CDF\",\"Random genes CDF\") ,pch=c(19,19), col=c(\"red\",\"black\") ,cex=1)\n  dev.off()\n  \n}\n",
    "created" : 1478686650329.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "773425750",
    "id" : "FFDCDBF4",
    "lastKnownWriteTime" : 1478877974,
    "path" : "/Library/WebServer/Documents/TFmiR/backend/TFMir.R",
    "project_path" : "TFMir.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}