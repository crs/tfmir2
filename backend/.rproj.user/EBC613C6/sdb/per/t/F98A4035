{
    "contents" : "###########################################\n#  - TFMir  Project                       #\n#  - TFMir  statistics functions          #\n#  - 2014-10-1                            #\n#  - Copyright: Mohamed Hamed             #\n###########################################\n\n#R programming environments:\n#- R studio IDE\n#- R version 2.12.0 (2010-10-15)\n#-Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)\n#-locale:   [1] C/en_US.UTF-8/C/C/C/C\n\n\n## ===============================\n## significance_overlapbysimulation\n## ===============================\ncountOverlap<-function(total, numgA, numgB, replace=FALSE){\n  groupA<-sample.int(total, numgA, replace=replace)\n  groupB<-sample.int(total, numgB, replace=replace)\n  return(length(intersect(groupA, groupB)))\n}\n\noverlapSignificance_By_simulation=function(total, numgA, numgB,overlap,no_of_simulation, replace=FALSE )\n{\n  tmpres<-replicate(no_of_simulation, countOverlap(total, numgA, numgB))\n  pval<-mean(tmpres >= overlap)\n  pval\n}\n\noverlapSignificance_By_HyperGEOM=function(total, numgA, numgB,overlap, replace=FALSE )\n{\n#   If you want to test a number overlap, then the probability of getting that number or smaller from this model is\n#   phyper(overlap, sampleb, totala - sampleb, samplec) \n#   and of getting that number or larger is\n#   1 - phyper(overlap - 1, sampleb, totala - sampleb, samplec)\n#   or   phyper(overlap - 1, sampleb, totala - sampleb, samplec,lower.tail=FALSE)\n\n  pval=phyper(overlap-1, numgA, total - numgA, numgB,lower.tail=FALSE) \n  pval\n}\n\noverlapSignificance_By_Python=function(total, numgA, numgB,overlap, replace=FALSE )\n{\n  stat=paste( \"python list_overlap_p.py \",overlap,\" \",total,\" \",numgA,\" \",numgB,sep=\"\")\n  pval=system(stat)\n  pval\n}\n\n\nDO_ORA_FOR_MIRNA=function(mirnas,category,pval.cutoff)\n{\n  #print(mirnas)\n  association.file=\"\"\n  if(category ==\"function\") { association.file=mirna.function.association\n  } else if(category ==\"disease\") association.file=mirna.disease.association\n  terms=unique(unlist(association.file[association.file[,1] %in% mirnas,2]))\n  total= length(unique(association.file$mirna))\n  #print(total)\n  terms.df=data.frame(\"Category\"=character(),\"Term\"=character(),\"Count\"=numeric(),\"Mir\"=character(),\"Percentage\"=numeric(),\"Pval\"=numeric())\n  \n  for(i in 1: length(terms))\n  {\n    t=terms[i]\n    mirna.t=unique(unlist(association.file[association.file[,2] %in% t,1]))\n    overlap=intersect(mirna.t,mirnas)\n    overlap.count=length(overlap)\n    numgA=length(mirnas)\n    numgB=length(mirna.t)\n    pval=phyper(overlap.count-1, numgA, total - numgA, numgB,lower.tail=FALSE)\n    perc= (overlap.count / numgB)* 100\n    #print(c(\"Category\"=category,\"Term\"=t,\"Count\"=overlap.count,\"Mir\"=toString(overlap),\"Percentage\"=perc,\"Pval\"=pval))\n    if ((overlap.count > 0) & !is.na(pval)) {\n      row=data.frame(\"Category\"=category,\"Term\"=t,\"Count\"=overlap.count,\"Mir\"=toString(overlap),\"Percentage\"=perc,\"Pval\"=pval)\n      terms.df=rbind(terms.df,row)\n    }\n  }\n  #print(length(terms.df$Mir))\n  if(!is.null(terms.df$Mir) & length(terms.df$Mir)>0){\n    pval.BH=mt.rawp2adjp(terms.df$Pval,proc=\"BH\")\n \n    terms.df=terms.df[pval.BH$index,]\n    terms.df[\"Pval.BH\"]=(pval.BH$adjp)[,2]\n  \n    pval.Bonf=mt.rawp2adjp(terms.df$Pval,proc=\"Bonferroni\")\n    terms.df=terms.df[pval.Bonf$index,]\n    terms.df[\"Pval.Bonf\"]=(pval.Bonf$adjp)[,2]\n  \n    terms.df=terms.df[terms.df$Pval <= pval.cutoff,]\n    }else{terms.df=c(\"\")}\n  \n}\n\n\n\n\ngetMiRNAsRegulatorsofTFs=function( tfs, pval.cutoff,evidence)\n{\n  ###  mirna-gene interactions\n  db=dbs.all[dbs.all$category==\"mirna-gene\" & dbs.all$evidence %in% evidence, ]\n  tfs.regulators= unique(as.character(unlist(db[db$target %in%  tfs, ]$regulator)))\n  #total= length(unique(as.character(unlist(db$target))))\n  total= as.integer(config$Total.No.of.genes)\n  pvals=c()\n  for(i in 1: length(tfs.regulators))\n  {\n    mirna=tfs.regulators[i]\n    mirna.targets=unique(as.character(unlist(db[db$regulator %in% mirna,]$target)))\n    overlap=length(intersect(tolower(mirna.targets),tolower(tfs)))\n    numgA=length(tfs)\n    numgB=length(mirna.targets)\n    #total=as.integer(config$Total.No.of.genes.in.human)\n    pvals=c(pvals,phyper(overlap-1, numgA, total - numgA, numgB,lower.tail=FALSE) )    \n  }\n  pvals.BH=mt.rawp2adjp(pvals,proc=\"BH\")\n  tfs.regulators=tfs.regulators[pvals.BH$index]\n  pvals.BH=(pvals.BH$adjp)[,2]\n  return(tfs.regulators[which(pvals.BH < pval.cutoff)])\n  \n}\n\ngetMiRNAsTargetsofTFs=function( tfs, pval.cutoff,evidence)\n{\n  ###  TF-miRNA interactions\n  db=dbs.all[dbs.all$category==\"tf-mirna\" & dbs.all$evidence %in% evidence, ]\n  tfs.targets= unique(as.character(unlist(db[db$regulator %in%  tfs, ]$target)))\n  #total= length(unique(as.character(unlist(db$regulator))))\n  total= as.integer(config$Total.No.of.genes)\n  \n  pvals=c()\n  for(i in 1: length(tfs.targets))\n  {\n    mirna=tfs.targets[i]\n    mirna.regulators=unique(as.character(unlist(db[db$target %in% mirna,]$regulator)))\n    overlap=length(intersect(tolower(mirna.regulators),tolower(tfs)))\n    numgA=length(tfs)\n    numgB=length(mirna.regulators)\n    #total=as.integer(config$Total.No.of.genes.in.human)\n    pvals=c(pvals,phyper(overlap-1, numgA, total - numgA, numgB,lower.tail=FALSE) )    \n  }\n  pvals.BH=mt.rawp2adjp(pvals,proc=\"BH\")\n  tfs.targets=tfs.targets[pvals.BH$index]\n  pvals.BH=(pvals.BH$adjp)[,2]\n  return(tfs.targets[which(pvals.BH<pval.cutoff)])  \n}\n\n\n\n\n##### for the third scenarion : when user inputs a list of miRNAs only\n### then u get the list of Tfs(regulators) and genes(targets) which are \n## statistically eniched in the input miRNA list\n\n\ngetTFsRegulatorsofMiRNAs=function( mirnas, pval.cutoff,evidence)\n{\n  ###  mirna-gene interactions\n  db=dbs.all[dbs.all$category==\"tf-mirna\" & dbs.all$evidence %in% evidence, ]\n  tfs.regulators= unique(as.character(unlist(db[db$target %in%  mirnas, ]$regulator)))\n  #total= length(unique(as.character(unlist(db$target))))\n  total= as.integer(config$Total.No.of.miRNA)\n  pvals=c()\n  for(i in 1: length(tfs.regulators))\n  {\n    tf=tfs.regulators[i]\n    mirna.targets=unique(as.character(unlist(db[db$regulator %in% tf,]$target)))\n    overlap=length(intersect(tolower(mirna.targets),tolower(mirnas)))\n    numgA=length(mirnas)\n    numgB=length(mirna.targets)\n    pvals=c(pvals,phyper(overlap-1, numgA, total - numgA, numgB,lower.tail=FALSE) )    \n  }\n  pvals.BH=mt.rawp2adjp(pvals,proc=\"BH\")\n  tfs.regulators=tfs.regulators[pvals.BH$index]\n  pvals.BH=(pvals.BH$adjp)[,2]\n  return(tfs.regulators[which(pvals.BH < pval.cutoff)])\n  \n}\n\ngetTFsTargetsofMiRNAs=function( mirnas, pval.cutoff,evidence)\n{\n  ###  TF-miRNA interactions\n  db=dbs.all[dbs.all$category==\"mirna-gene\" & dbs.all$evidence %in% evidence, ]\n  tfs.targets= unique(as.character(unlist(db[db$regulator %in%  mirnas, ]$target)))\n  #total= length(unique(as.character(unlist(db$regulator))))\n  total= as.integer(config$Total.No.of.miRNA)\n  pvals=c()\n  for(i in 1: length(tfs.targets))\n  {\n    tf=tfs.targets[i]\n    mirna.regulators=unique(as.character(unlist(db[db$target %in% tf,]$regulator)))\n    overlap=length(intersect(tolower(mirna.regulators),tolower(mirnas)))\n    numgA=length(mirnas)\n    numgB=length(mirna.regulators)\n    pvals=c(pvals,phyper(overlap-1, numgA, total - numgA, numgB,lower.tail=FALSE) )    \n  }\n  pvals.BH=mt.rawp2adjp(pvals,proc=\"BH\")\n  tfs.targets=tfs.targets[pvals.BH$index]\n  pvals.BH=(pvals.BH$adjp)[,2]\n  return(tfs.targets[which(pvals.BH<pval.cutoff)])  \n}\n\n\n\n",
    "created" : 1478686864203.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3582391396",
    "id" : "F98A4035",
    "lastKnownWriteTime" : 1468854442,
    "path" : "/Library/WebServer/Documents/TFmiR/backend/statistics.R",
    "project_path" : "statistics.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}