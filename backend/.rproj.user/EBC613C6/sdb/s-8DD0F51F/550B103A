{
    "contents" : "###########################################\n#  - TFMir  Project                       #\n#  - TFMir  Graph code statistics         #\n#  - Main function to be called           #\n#  - 2014-10-1                            #\n#  - Copyright: Mohamed Hamed             #\n###########################################\n\n#R programming environments:\n#- R studio IDE\n#- R version 2.12.0 (2010-10-15)\n#-Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)\n#-locale:   [1] C/en_US.UTF-8/C/C/C/C\n\n\nif(identical(speciesp,\"Human\")){\n  env=org.Hs.egALIAS2EG\n  symbol=\"hsa-\"\n}\n\nif(identical(speciesp,\"Mouse\")){\n  env=org.Mm.egALIAS2EG\n  symbol=\"mmu\"\n}\n\n## ====================================\n## analyze the disease specific network\n## ====================================\ngetEdgeIndexforDisease=function(net)\n{\n  return( (dim(net[net$is_regulator_in_disease==TRUE | net$is_target_in_disease==TRUE,])[1]) / (dim(net)[1] ) * 100)\n}\n\ngetNodeIndexforDisease=function(net)\n{\n  nodes.all.net=unique(c(as.character(net$regulator) , as.character(net$target) ))\n  dis.net=net[net$is_regulator_in_disease==TRUE | net$is_target_in_disease==TRUE,]\n  nodes.dis.net= unique(c(as.character(dis.net$regulator) , as.character(dis.net$target) ))\n  index= (length(nodes.dis.net) / length(nodes.all.net)) *100\n  return(index)\n}\n\n\nplotDegreeDistribution_old=function (net,disease.net,output.path,disease)\n{\n  #### the whole network\n  nodes.df=as.data.frame( unique(c(as.character(unlist(net$regulator)), as.character(unlist(net$target)))))  \n  g=graph.data.frame(net,directed=T,vertices=nodes.df)\n  degree.dist.net= degree.distribution(g, cumulative = T)\n  \n  #### the disease network\n  nodes.df=as.data.frame( unique(c(as.character(unlist(disease.net$regulator)), as.character(unlist(disease.net$target)))))  \n  g=graph.data.frame(disease.net,directed=T,vertices=nodes.df)\n  degree.dist.disease.net= degree.distribution(g, cumulative = T)\n  \n  ## ==========================================\n  ## Degree distribution of the both network\n  ## ==========================================\n  CairoPNG(output.path,width=as.integer(config$degreediagram.width),height=as.integer(config$degreediagram.hight))\n  plot(degree.dist.net,log=\"xy\", col=2, pch=20,type=\"p\",main=\"\",xlab=\"Degree\", ylab=\"Frequency\")\n  if(! is.na(disease) & disease !=\"\"){\n    points(degree.dist.disease.net,col=3,pch=18)\n    legend(\"bottomleft\", c(\"Whole network links \",\"Disease specific network\"),cex=0.75 ,col=2:3, pch=c(20,18), ncol=1, yjust=0, lty=0)\n  }\n  dev.off()\n}\n\nplotDegreeDistribution=function (net,output.path)\n{\n  nodes.df=as.data.frame( unique(c(as.character(unlist(net$regulator)), as.character(unlist(net$target)))))  \n  g=graph.data.frame(net,directed=T,vertices=nodes.df)\n  degree.dist.net= degree.distribution(g, cumulative = T)\n  ## ==========================================\n  ## Degree distribution of the network\n  ## ==========================================\n  CairoPNG(output.path,width=as.integer(config$degreediagram.width),height=as.integer(config$degreediagram.hight))\n  plot(degree.dist.net,log=\"xy\", col=2, pch=20,type=\"p\",main=\"\",xlab=\"Degree\", ylab=\"Frequency\")\n  dev.off()\n}\n\ngetnetworkProperties=function (df)\n{\n  \n  nodes.df=as.data.frame( unique(c(as.character(unlist(df$regulator)), as.character(unlist(df$target)))))  \n  g=graph.data.frame(df,directed=T,vertices=nodes.df)\n  ## ====================================\n  ## Network measures and some properites\n  ## ====================================\n  graph.nodes.no=length(V(g))\n  graph.edges.no=length(E(g))\n  graph.density=round(graph.density(g, loops=T),digits=3)\n  graph.diameter=diameter(g)\n  graph.avg.path.length=  round( average.path.length(g) , digits=3)\n  graph.transitivity= round (transitivity(g) , digits=3)\n  \n  #plot(g,vertex.label = V(g)$name,layout=layout.fruchterman.reingold(g),edge.arrow.size =0.4)\n  #get the hot spots from the top 5 % of the highest degree nodes \n  index=rev(order(degree(g)))\n  degree.hotspots=V(g)$name[index] [1:ceiling( length(V(g)) * as.integer(config$hotspot.percentage) /100) ]\n  \n  index=rev(order(closeness(g)))\n  closeness.hotspots=V(g)$name[index] [1:ceiling( length(V(g)) * as.integer(config$hotspot.percentage) /100) ]\n  \n  \n  index=rev(order(betweenness(g)))\n  betweenness.hotspots=V(g)$name[index] [1:ceiling( length(V(g)) * as.integer(config$hotspot.percentage) /100) ]\n  \n  eigenvector.hotspots=c(\"\")\n  if(length(E(g)) > 1 ){\n  index=rev(order(evcent(g)$vector))\n  eigenvector.hotspots=V(g)$name[index] [1:ceiling( length(V(g)) * as.integer(config$hotspot.percentage) /100) ]\n  }\n    \n  common.hotspots=unique(Reduce(intersect,  list(v1 = degree.hotspots, \n                                v2 = closeness.hotspots, \n                                v3 = betweenness.hotspots,\n                                v4 = eigenvector.hotspots)))\n  union.hotspots=unique(c(degree.hotspots,closeness.hotspots,betweenness.hotspots,eigenvector.hotspots))\n  \n  return(c( graph.nodes.no,graph.edges.no,graph.density,graph.diameter,graph.avg.path.length,graph.transitivity,\n            toString(degree.hotspots),toString(closeness.hotspots),toString(betweenness.hotspots),\n            toString(eigenvector.hotspots),toString(common.hotspots),toString(union.hotspots)))\n}\n\n\n\n\nexportNetworkProperties=function (net,net.output.path,disease,pval.cutoff,tissue)\n{\n  \n  if  (! file.exists(net.output.path)){\n    dir.create(file.path(net.output.path))\n  }\n  net.3node = net[(!(net$category %in% \"gene-gene\")),]\n  write.table(net.3node,file=file.path(net.output.path,\"res.txt\"), quote=F,row.names=F,col.names=T,sep=\"\\t\")\n  write.table(net,file=file.path(net.output.path,\"res.4node.txt\"), quote=F,row.names=F,col.names=T,sep=\"\\t\")\n  \n  ## =======================================================================\n  ## DO functional, miRNA enrichment, and statistics for the final node list\n  ## =======================================================================\n  allnodes.disease=c()\n  if(! is.na(disease) & disease !=\"\")\n    {\n      allnodes.disease=c( as.character(getGenesforDisease(disease)),as.character(getmiRNAforDisease(disease)))  \n    }\n  \n  nodes.net= unique(c(as.character(net$regulator) , as.character(net$target) ))\n  pval.hypergeom.disease.node=overlapSignificance_By_HyperGEOM(total = as.integer(config$Total.No.of.miRNA.in.human) + as.integer(config$Total.No.of.genes.in.human),\n                                                               numgA=length(nodes.net),numgB=length(allnodes.disease),\n                                                               overlap=length(intersect(nodes.net,allnodes.disease)))\n  \n  nodes.net.mirna=  nodes.net[ grep(symbol,nodes.net)]\n  nodes.net.gene=  setdiff(nodes.net,nodes.net.mirna)\n  nodes.net.gene.etrezID=toString(as.vector(unlist(mget(as.character(nodes.net.gene), envir=env, ifnotfound=NA))))\n  david.BP=paste(\"http://david.abcc.ncifcrf.gov/api.jsp?type=ENTREZ_GENE_ID&ids=\",nodes.net.gene.etrezID,\",&tool=chartReport&annot=GOTERM_BP_ALL\",sep=\"\")\n  david.KEGG=paste(\"http://david.abcc.ncifcrf.gov/api.jsp?type=ENTREZ_GENE_ID&ids=\",nodes.net.gene.etrezID,\",&tool=chartReport&annot=KEGG_PATHWAY\",sep=\"\")\n  david.OMIM=paste(\"http://david.abcc.ncifcrf.gov/api.jsp?type=ENTREZ_GENE_ID&ids=\",nodes.net.gene.etrezID,\",&tool=chartReport&annot=OMIM_DISEASE\",sep=\"\")    \n  david.functional.clust=paste(\"http://david.abcc.ncifcrf.gov/api.jsp?type=ENTREZ_GENE_ID&ids=\",nodes.net.gene.etrezID,\",&tool=term2term&annot=GOTERM_BP_ALL\",sep=\"\")    \n  \n  if(length(nodes.net.mirna) > 0)\n  {\n    mirna.ora.function=DO_ORA_FOR_MIRNA(nodes.net.mirna,category=\"function\",pval.cutoff=pval.cutoff)\n    mirna.ora.disease=DO_ORA_FOR_MIRNA(nodes.net.mirna,category=\"disease\",pval.cutoff = pval.cutoff)\n    mirna.ora=rbind(mirna.ora.function, mirna.ora.disease)\n    #print(dim(mirna.ora)[1])\n    #print(mirna.ora)\n    if(dim(mirna.ora)[2] == 1)\n      mirna.ora = data.frame(\"Category\"=\"NA\",\"Term\"=\"NA\",\"Count\"=\"NA\",\"Mir\"=\"NA\",\"Percentage\"=\"NA\",\"Pval\"=\"NA\",\"Pval.BH\"=\"NA\",\"Pval.Bonf\"=\"NA\")\n    #mirna.ora=c()\n    write.table(mirna.ora,file=file.path(net.output.path,\"mirna.ora.txt\"), quote=F,row.names=F,col.names=T,sep=\"\\t\")\n  }\n  \n  if(length(nodes.net.gene) > 0)\n  {\n    summary.file=file.path (net.output.path,\"genes.ora.txt\")\n    write(nodes.net.gene.etrezID,      file=summary.file,append=F,sep=\"\\n\")\n    \n    #write(paste(\"david.BP.link=\",david.BP,sep=\"\"),      file=summary.file,append=F,sep=\"\\n\")\n    #write(paste(\"david.KEGG.link=\",david.KEGG,sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n    #write(paste(\"david.OMIM.link=\",david.OMIM,sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n    #write(paste(\"david.functional.clust.link=\",david.functional.clust,sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  }\n  \n  \n  ## ==============================================================\n  ## Perform network analysis and statistics on the disease network \n  ## ==============================================================\n  disease.net.coverage.rate.edge=round(getEdgeIndexforDisease(net),digits=2)\n  disease.net.coverage.rate.node=round(getNodeIndexforDisease(net),digits=2)  \n  degree.image.path=file.path(net.output.path,\"degree.png\")\n  plotDegreeDistribution(net,degree.image.path)\n  network.properties=getnetworkProperties(net)\n  \n  ## =========================================\n  ## output the summary of the disease network\n  ## =========================================\n  \n  \n  summary.file=file.path (net.output.path,\"summary.txt\")\n  \n  write(paste(\"pval.hypergeom.disease.node=\",pval.hypergeom.disease.node,sep=\"\"),      file=summary.file,append=F,sep=\"\\n\")\n  write(paste(\"disease.net.coverage.rate.edge=\",disease.net.coverage.rate.edge,sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  write(paste(\"disease.net.coverage.rate.node=\",disease.net.coverage.rate.node,sep=\"\"),  file=summary.file,append=T,sep=\"\\n\")\n  write(paste(\"degree.image.path=\",degree.image.path,sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  \n  write(paste(\"graph.nodes.no=\",network.properties[1],sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  write(paste(\"graph.edges.no=\",network.properties[2],sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  write(paste(\"graph.density=\",network.properties[3],sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  write(paste(\"graph.diameter=\",network.properties[4],sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  write(paste(\"graph.avg.path.length=\",network.properties[5],sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  write(paste(\"graph.transitivity=\",network.properties[6],sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  #http://horicky.blogspot.de/2012/04/basic-graph-analytics-using-igraph.html\n  write(paste(\"tissue.hotspots=\",tissue,sep=\"\"),     file=summary.file,append=T,sep=\"\\n\")\n  write(paste(\"degree.hotspots=\",network.properties[7],sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  write(paste(\"closeness.hotspots=\",network.properties[8],sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  write(paste(\"betweenness.hotspots=\",network.properties[9],sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  write(paste(\"eigenvector.hotspots=\",network.properties[10],sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  write(paste(\"common.hotspots=\",network.properties[11],sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n  write(paste(\"union.hotspots=\",network.properties[12],sep=\"\"),      file=summary.file,append=T,sep=\"\\n\")\n}\n\n\n\n\n## =======================\n## Motif detection methods \n## =======================\n\ngetPutativeTFmiRPairs=function (net)\n{\n  regulators=unique(as.character(unlist(net$regulator)))\n  mirnas=regulators[ grep(symbol,regulators)]\n  tfs=setdiff(regulators, mirnas)\n  \n  tfmir.pairs=data.frame(tf=character(), mirna=character(),targets=character(),pvals.tfmirpair=numeric())\n  \n  for(i in 1 : length(tfs))\n  {\n    for(j in 1 :length(mirnas))\n    {\n      targets.mirna= unlist(net[net$regulator ==mirnas[j], ]$target)\n      targets.mirna= setdiff(targets.mirna, targets.mirna [ grep(symbol, targets.mirna)])\n      \n      targets.tf= unlist(net[net$regulator ==tfs[i], ]$target)\n      targets.tf= setdiff(targets.tf, targets.tf [ grep(symbol, targets.tf)])\n      \n      \n      common.targets=intersect(targets.mirna,targets.tf )\n      if( length(common.targets) > 0 )\n      {\n        row=data.frame (tf=tfs[i], mirna=mirnas[j], targets=toString(common.targets),pvals.tfmirpair=0)\n        tfmir.pairs=rbind(tfmir.pairs,row)\n      }\n    }\n  }\n  \n  return(tfmir.pairs)\n}\n\ngetPutativeTFmiRPairs4Node_tf_mirna=function (net)\n{\n  no = 0\n  targets.tf.mirna = c()\n  regulators=unique(as.character(unlist(net$regulator[which(net$category %in% \"tf-gene\" | net$category %in% \"mirna-gene\" | net$category %in% \"mirna-mirna\")])))\n  #regulators=unique(as.character(unlist(net$regulator)))\n  mirnas=regulators[ grep(symbol,regulators)]\n  tfs=setdiff(regulators, mirnas)\n  #print(c(\"tf, mirna\", tfs, mirnas))\n  tfmir.pairs=data.frame(tf=character(), mirna=character(),targets=character(),pvals.tfmirpair=numeric())\n  \n  for(i in 1 : length(tfs))\n  {\n    for(j in 1 :length(mirnas))\n    {\n      targets.mirna= unlist(net[net$regulator ==mirnas[j], ]$target)\n      targets.mirna= setdiff(targets.mirna, targets.mirna [ grep(symbol, targets.mirna)])\n      \n      targets.tf= unlist(net[net$regulator ==tfs[i], ]$target)\n      targets.tf= setdiff(targets.tf, targets.tf [ grep(symbol, targets.tf)])\n      \n      #targets.tf.mirna1 = union(\n        #toString(net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & net$regulator %in% targets.tf & net$target %in% targets.tf & net$target %in% targets.mirna)]),\n        #net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & net$regulator %in% targets.tf & net$target %in% targets.tf & net$target %in% targets.mirna)]\n      #)\n      #print(c(\"targets.tf.mirna\",targets.tf.mirna))\n      regulators = toString((net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & net$regulator %in% targets.tf & net$target %in% targets.tf & net$target %in% targets.mirna)]))\n      targets = toString((net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & net$regulator %in% targets.tf & net$target %in% targets.tf & net$target %in% targets.mirna)]))\n      \n      if((length(grep(\", \",regulators))>0) & regulators != \"\" & (length(grep(\", \",targets))>0) & targets != \"\"){\n        regulators=strsplit(regulators,\", \")\n        targets=strsplit(targets,\", \")\n        #print(c(\"length,r,t\",length(regulators[[1]]),length(targets[[1]])))\n      }\n      \n      if(length(regulators) > 0 && regulators != \"\"){\n        \n        for( z in 1:length(regulators[[1]]))  \n        {\n          targets.tf.mirna = paste(regulators[[1]][z],targets[[1]][z],sep=\",\")\n          row=data.frame (tf=tfs[i], mirna=mirnas[j], targets=targets.tf.mirna,pvals.tfmirpair=0)\n          tfmir.pairs=rbind(tfmir.pairs,row)\n          no = no + 1\n        }\n      }\n    }\n  }\n  return(tfmir.pairs)\n}\ngetPutativeTFmiRPairs4Node_tf=function (net)\n{\n  no = 0\n  targets.tf.mirna = c()\n  regulators=unique(as.character(unlist(net$regulator[which(net$category %in% \"tf-gene\" | net$category %in% \"mirna-gene\" | net$category %in% \"mirna-mirna\")])))\n  #regulators=unique(as.character(unlist(net$regulator)))\n  mirnas=regulators[ grep(symbol,regulators)]\n  tfs=setdiff(regulators, mirnas)\n  \n  tfmir.pairs=data.frame(tf=character(), mirna=character(),targets=character(),pvals.tfmirpair=numeric())\n  \n  for(i in 1 : length(tfs))\n  {\n    for(j in 1 :length(mirnas))\n    {\n      targets.mirna= unlist(net[net$regulator ==mirnas[j], ]$target)\n      targets.mirna= setdiff(targets.mirna, targets.mirna [ grep(symbol, targets.mirna)])\n      \n      targets.tf= unlist(net[net$regulator ==tfs[i], ]$target)\n      targets.tf= setdiff(targets.tf, targets.tf [ grep(symbol, targets.tf)])\n      \n      #targets.tf.mirna = Reduce(union,list(\n        #net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & net$regulator %in% targets.tf & net$target %in% targets.tf & !(net$target %in% targets.mirna))],\n        #net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & net$regulator %in% targets.tf & net$target %in% targets.tf & !(net$target %in% targets.mirna))],\n        #net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.tf & !(net$regulator %in% targets.mirna) & net$target %in% targets.tf & net$target %in% targets.mirna)],\n        #net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.tf & !(net$regulator %in% targets.mirna) & net$target %in% targets.tf & net$target %in% targets.mirna)]\n        #)\n      #)\n      regulators1 = toString(net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & net$regulator %in% targets.tf & net$target %in% targets.tf & !(net$target %in% targets.mirna))])\n      regulators2 = toString(net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.tf & !(net$regulator %in% targets.mirna) & net$target %in% targets.tf & net$target %in% targets.mirna)])\n      targets1 = toString(net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & net$regulator %in% targets.tf & net$target %in% targets.tf & !(net$target %in% targets.mirna))])\n      targets2 = toString(net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.tf & !(net$regulator %in% targets.mirna) & net$target %in% targets.tf & net$target %in% targets.mirna)])\n      regulators = c(regulators1,regulators2)\n      targets = c(targets1,targets2)\n      if((length(grep(\", \",regulators))>0) && regulators != \"\" && (length(grep(\", \",targets))>0) && targets != \"\"){\n        regulators1 = strsplit(regulators1, \", \")\n        regulators2 = strsplit(regulators2, \", \")\n        targets1 = strsplit(targets1,\", \")\n        targets2 = strsplit(targets2,\", \")\n        regulators = c(unlist(regulators1),unlist(regulators2))\n        targets = c(unlist(targets1),unlist(targets2))\n      }\n      if(length(regulators) > 0 && regulators != \"\"){\n        for( z in 1:length(regulators))  \n        {\n          if(regulators[z] != \"\" & targets[z] != \"\"){\n            targets.tf.mirna = paste(regulators[z],targets[z],sep=\",\")\n            row=data.frame (tf=tfs[i], mirna=mirnas[j], targets=targets.tf.mirna,pvals.tfmirpair=0)\n            tfmir.pairs=rbind(tfmir.pairs,row)\n            no = no + 1\n          }\n        }\n      }\n    }\n  }\n  return(tfmir.pairs)\n}\ngetPutativeTFmiRPairs4Node_mirna=function (net)\n{\n  no = 1\n  targets.tf.mirna = c()\n  regulators=unique(as.character(unlist(net$regulator[which(net$category %in% \"tf-gene\" | net$category %in% \"mirna-gene\" | net$category %in% \"mirna-mirna\")])))\n  mirnas=regulators[ grep(symbol,regulators)]\n  tfs=setdiff(regulators, mirnas)\n  \n  tfmir.pairs=data.frame(tf=character(), mirna=character(),targets=character(),pvals.tfmirpair=numeric())\n  \n  for(i in 1 : length(tfs))\n  {\n    for(j in 1 :length(mirnas))\n    {\n      targets.mirna= unlist(net[net$regulator ==mirnas[j], ]$target)\n      targets.mirna= setdiff(targets.mirna, targets.mirna [ grep(symbol, targets.mirna)])\n      \n      targets.tf= unlist(net[net$regulator ==tfs[i], ]$target)\n      targets.tf= setdiff(targets.tf, targets.tf [ grep(symbol, targets.tf)])\n      \n      #targets.tf.mirna = Reduce(union,list(\n        #net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & net$regulator %in% targets.tf & net$target %in% targets.mirna & !(net$target %in% targets.tf))],\n        #net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & net$regulator %in% targets.tf & net$target %in% targets.mirna & !(net$target %in% targets.tf))],\n        #net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & !(net$regulator %in% targets.tf) & net$target %in% targets.tf & net$target %in% targets.mirna)],\n        #net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & !(net$regulator %in% targets.tf) & net$target %in% targets.tf & net$target %in% targets.mirna)]\n       #)\n      #)    \n      regulators1 = toString(net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & net$regulator %in% targets.tf & net$target %in% targets.mirna & !(net$target %in% targets.tf))])\n      regulators2 = toString(net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & !(net$regulator %in% targets.tf) & net$target %in% targets.tf & net$target %in% targets.mirna)])\n      targets1 = toString(net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & net$regulator %in% targets.tf & net$target %in% targets.mirna & !(net$target %in% targets.tf))])\n      targets2 = toString(net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & !(net$regulator %in% targets.tf) & net$target %in% targets.tf & net$target %in% targets.mirna)])\n      regulators = c(regulators1,regulators2)\n      targets = c(targets1,targets2)\n      \n      if((length(grep(\", \",regulators))>0) && regulators != \"\" && (length(grep(\", \",targets))>0) && targets != \"\"){\n        regulators1 = strsplit(regulators1, \", \")\n        regulators2 = strsplit(regulators2, \", \")\n        targets1 = strsplit(targets1,\", \")\n        targets2 = strsplit(targets2,\", \")\n        regulators = c(unlist(regulators1),unlist(regulators2))\n        targets = c(unlist(targets1),unlist(targets2))\n      }\n      if(length(regulators) > 0 && regulators != \"\"){\n        for( z in 1:length(regulators))  \n        {\n          if(regulators[z] != \"\" & targets[z] != \"\"){\n            targets.tf.mirna = paste(regulators[z],targets[z],sep=\",\")\n            row=data.frame (tf=tfs[i], mirna=mirnas[j], targets=targets.tf.mirna,pvals.tfmirpair=0)\n            tfmir.pairs=rbind(tfmir.pairs,row)\n            no = no + 1\n          }\n        }\n      }\n    }\n  }\n  return(tfmir.pairs)\n}\ngetPutativeTFmiRPairs4Node=function (net)\n{\n  no = 1\n  targets.tf.mirna = c()\n  regulators=unique(as.character(unlist(net$regulator[which(net$category %in% \"tf-gene\" | net$category %in% \"mirna-gene\" | net$category %in% \"mirna-mirna\")])))\n  mirnas=regulators[ grep(symbol,regulators)]\n  tfs=setdiff(regulators, mirnas)\n  \n  tfmir.pairs=data.frame(tf=character(), mirna=character(),targets=character(),pvals.tfmirpair=numeric())\n  \n  for(i in 1 : length(tfs))\n  {\n    for(j in 1 :length(mirnas))\n    {\n      targets.mirna= unlist(net[net$regulator ==mirnas[j], ]$target)\n      targets.mirna= setdiff(targets.mirna, targets.mirna [ grep(symbol, targets.mirna)])\n      \n      targets.tf= unlist(net[net$regulator ==tfs[i], ]$target)\n      targets.tf= setdiff(targets.tf, targets.tf [ grep(symbol, targets.tf)])\n      \n      #targets.tf.mirna = Reduce(union,list(\n        #net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.tf & !(net$regulator %in% targets.mirna) & net$target %in% targets.mirna & !(net$target %in% targets.tf))],\n        #net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.tf & !(net$regulator %in% targets.mirna) & net$target %in% targets.mirna & !(net$target %in% targets.tf))],\n        #net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & !(net$regulator %in% targets.tf) & net$target %in% targets.tf & !(net$target %in% targets.mirna))],\n        #net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & !(net$regulator %in% targets.tf) & net$target %in% targets.tf & !(net$target %in% targets.mirna))]\n        #)\n      #)\n      regulators1 = toString(net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.tf & !(net$regulator %in% targets.mirna) & net$target %in% targets.mirna & !(net$target %in% targets.tf))])\n      regulators2 = toString(net$regulator[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & !(net$regulator %in% targets.tf) & net$target %in% targets.tf & !(net$target %in% targets.mirna))])\n      targets1 = toString(net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.tf & !(net$regulator %in% targets.mirna) & net$target %in% targets.mirna & !(net$target %in% targets.tf))])\n      targets2 = toString(net$target[which(net$category %in% \"gene-gene\" & net$regulator %in% targets.mirna & !(net$regulator %in% targets.tf) & net$target %in% targets.tf & !(net$target %in% targets.mirna))])\n      regulators = c(regulators1,regulators2)\n      targets = c(targets1,targets2)\n      \n      if((length(grep(\", \",regulators))>0) && regulators != \"\" && (length(grep(\", \",targets))>0) && targets != \"\"){\n        regulators1 = strsplit(regulators1, \", \")\n        regulators2 = strsplit(regulators2, \", \")\n        targets1 = strsplit(targets1,\", \")\n        targets2 = strsplit(targets2,\", \")\n        regulators = c(unlist(regulators1),unlist(regulators2))\n        targets = c(unlist(targets1),unlist(targets2))\n      }\n      if(length(regulators) > 0 && regulators != \"\"){\n        for( z in 1:length(regulators))  \n        {\n          if(regulators[z] != \"\" & targets[z] != \"\"){\n            targets.tf.mirna = paste(regulators[z],targets[z],sep=\",\")\n            row=data.frame (tf=tfs[i], mirna=mirnas[j], targets=targets.tf.mirna,pvals.tfmirpair=0)\n            tfmir.pairs=rbind(tfmir.pairs,row)\n            no = no + 1\n          }\n        }\n      }\n    }\n  }\n  return(tfmir.pairs)\n}\ngetSignificantTFmiRpairs=function (net,evidence)\n{\n  \n  ### total is the number of common genes between all human genes targetted by human miRNA and all hman genes targeted by TFs\n  targets.bymirna=unique(as.character(unlist(dbs.all[dbs.all$category==\"mirna-gene\" & dbs.all$evidence %in% evidence, ]$target)))\n  targets.tfs=unique(as.character(unlist(dbs.all[dbs.all$category==\"tf-gene\" & dbs.all$evidence %in% evidence, ]$target)))\n  total=length(intersect(targets.bymirna, targets.tfs))\n  \n  pvals=c()\n  for(i in 1 : dim(net)[1])\n  {\n    tf=as.character(net$tf[i])\n    targets.tf= unique(as.character(unlist(dbs.all[dbs.all$category==\"tf-gene\" & dbs.all$evidence %in% evidence & dbs.all$regulator == tf, ]$target)))  \n    mirna=as.character(net$mirna[i])\n    targets.mirna= unique(as.character(unlist(dbs.all[dbs.all$category==\"mirna-gene\" & dbs.all$evidence %in% evidence & dbs.all$regulator == mirna, ]$target)))  \n    overlap=length(intersect(tolower(targets.mirna),tolower(targets.tf)))\n    numgA=length(targets.tf)\n    numgB=length(targets.mirna)\n    pvals=c(pvals,phyper(overlap-1, numgA, total - numgA, numgB,lower.tail=FALSE) )       \n  }\n  net[\"pvals.tfmirpair\"]=pvals\n#   pvals.BH=mt.rawp2adjp(pvals,proc=\"BH\")\n#   net=net[pvals.BH$index,]\n#   pvals.BH=(pvals.BH$adjp)[,2]\n#   net[\"pvals.BH\"]=pvals.BH\n  net=net[net$pvals < as.double(config$pval.cutoff.significant.TF.MIR.PAIRS),]\n  return(net)\n}\n\n\nrelaxMultipleTargetsForTFmiRPairs=function(tfmir.pairs)\n{       \n    if(dim(tfmir.pairs)[1] != 0){\n        tfmir.pairs.new=tfmir.pairs[tfmir.pairs$tf==\"SISI IBn KELAB\",] \n        for(i in 1: dim(tfmir.pairs)[1])\n        {\n          s=as.character(tfmir.pairs[i,]$targets)\n          strs=strsplit(s,\", \")\n          df=data.frame(targets= strs[[1]][1:length(strs[[1]])])\n          df[\"mirna\"]=tfmir.pairs[i,]$mirna\n          df[\"tf\"]=tfmir.pairs[i,]$tf\n          df[\"pvals.tfmirpair\"]=tfmir.pairs[i,]$pvals.tfmirpair\n          df=df[,c(3,2,1,4)]\n          tfmir.pairs.new=rbind(tfmir.pairs.new,df)\n        }\n      tfmir.pairs.new\n    }\n    else{\n      tfmir.pairs\n    }\n}\n\n\ngetMotifs.composite=function (tfmir.pairs,net)\n{ \n  motifs.empty=data.frame(\"motif.type\"=character(), \"tf\"=character(),\"mirna\"=character(),\"targets\"=character(), \"pvals.tfmirpair\"=numeric(),\n             \"pval.random\"=numeric(),\"zscore\"=numeric(),\"ENTREZ.IDs.coreg.targets\"=character(),\n             \"ENTREZ.IDs.motiftype.subnetwork\"=character())\n  index=c()\n  for (i  in 1 : dim(tfmir.pairs)[1])\n  {\n    tf   = as.character( tfmir.pairs$tf[i])\n    mirna= as.character( tfmir.pairs$mirna[i] )\n    ## check for composite motifs condition\n    if( dim(net[net$regulator == tf & net$target == mirna, ])[1] > 0   & dim(net[net$regulator == mirna & net$target == tf, ])[1] > 0)\n    {index=c(index,i)}\n  }\n  motifs=tfmir.pairs[index,]\n  motifs\n  \n  if(dim(motifs)[1] > 0)\n  {\n  ######## Randomize the network and get significance of this type\n  nodes.df=as.data.frame( unique(c(as.character(unlist(net$regulator)), as.character(unlist(net$target)))))  \n  g=graph.data.frame(net[,c(\"regulator\",\"target\")],directed=T,vertices=nodes.df)\n  tmpres=c()\n  for( i in 1 : as.integer(config$NO_OF_Times_FOR_Network_Randomizations))\n  {\n    #g.random=rewire(g, mode = \"simple\", niter = 2*length(E(g)))\n    g.random=rewire(g, keeping_degseq(loops=TRUE, niter = 2*length(get.edgelist(g))))\n    net.random=as.data.frame(get.edgelist(g.random,names=T))\n    names(net.random)=c(\"regulator\",\"target\")\n    tfmir.pairs.random=getPutativeTFmiRPairs(net.random)    \n    #tfmir.pairs.random=getSignificantTFmiRpairs(tfmir.pairs.random,evidence)\n    tfmir.pairs.random[\"pvals.tfmirpair\"]=1\n    tfmir.pairs.random=relaxMultipleTargetsForTFmiRPairs(tfmir.pairs.random)\n    index=c()\n    for ( j  in 1 : dim(tfmir.pairs.random)[1])\n    {\n      tf   = as.character( tfmir.pairs.random$tf[j])\n      mirna= as.character( tfmir.pairs.random$mirna[j] )\n      ## check for composite motifs condition\n      if( dim(net.random[net.random$regulator == tf & net.random$target == mirna, ])[1] > 0   & dim(net.random[net.random$regulator == mirna & net.random$target == tf, ])[1] > 0 )\n      {index=c(index,j)}\n    }\n    motifs.random=tfmir.pairs.random[index,]\n    tmpres= c(tmpres,dim(motifs.random)[1])    \n  }\n  pval<-mean(tmpres > dim(motifs)[1])\n  zscore=   ((dim(motifs)[1]) - (mean(tmpres))) / sd(tmpres)\n  motifs[\"pval.random\"]=pval\n  motifs[\"zscore\"]=zscore\n  ##################################################################\n  ###### get the entrez ids of co-regulated taget genes of each motif\n  motifs[\"Symbol.coreg.targets\"]=\"\"\n  motifs[\"ENTREZ.IDs.coreg.targets\"]=\"\"\n  for( i in 1 : dim(motifs)[1])\n  {\n    tfmirpair=c(as.character(motifs[i,]$tf), as.character(motifs[i,]$mirna))\n    targets=as.character( unlist(net[net$regulator %in% tfmirpair,]$target))\n    targets.mir=targets[grep(symbol,targets)]\n    targets.gene=unique(c(as.character(motifs[i,]$tf), setdiff(targets,targets.mir)))\n    motifs[i, ]$Symbol.coreg.targets=toString(targets.gene)\n    motifs[i, ]$ENTREZ.IDs.coreg.targets=toString(as.vector(unlist(mget(as.character(targets.gene), envir=env, ifnotfound=NA))))\n  }\n  \n  ###### get the entrez ids of co-targetted genes by the same Tf and miRNA\n  motifs[\"Symbol.cotargeted.genes\"]=\"\"\n  motifs[\"ENTREZ.IDs.cotargeted.genes\"]=\"\"\n  for( i in 1 : dim(motifs)[1])\n  {\n    targets.mirna= unlist(net[net$regulator == as.character(motifs[i,]$mirna) , ]$target)\n    targets.mirna= setdiff(targets.mirna, targets.mirna [ grep(symbol, targets.mirna)])  \n    targets.tf= unlist(net[net$regulator == as.character(motifs[i,]$tf), ]$target)\n    targets.tf= setdiff(targets.tf, targets.tf [ grep(symbol, targets.tf)])\n    common.targets=unique(intersect(targets.mirna,targets.tf))\n    motifs[i, ]$Symbol.cotargeted.genes=toString(common.targets)\n    motifs[i, ]$ENTREZ.IDs.cotargeted.genes=toString(as.vector(unlist(mget(as.character(common.targets), envir=env, ifnotfound=NA))))\n  }\n  #   ###### get the entrez ids of subnetworks of each motif type\n  #   tfs= as.character(unlist(motifs$tf))\n  #   genes=as.character(unlist(motifs$targets))\n  #   tfs.genes=unique(c(tfs,genes))\n  #   tfs.genes.entrez=as.vector(unlist(mget(as.character(tfs.genes), envir=org.Hs.egALIAS2EG, ifnotfound=NA)))\n  #   motifs[\"ENTREZ.IDs.motiftype.subnetwork\"]=toString(tfs.genes.entrez)\n  ######  add the type of the motif\n  motif.type=replicate(dim(motifs)[1],\"COMPOSITE-FFL\")\n  motifs=cbind(motif.type,motifs)\n  \n  #print(c(\"pval\", pval, \"motifs\", motifs))\n  return (motifs)\n  }\n  \n  return (motifs.empty)\n}\n\ngetMotifs.TF.FFL=function (tfmir.pairs,net)\n{ \n  motifs.empty=data.frame(\"motif.type\"=character(), \"tf\"=character(),\"mirna\"=character(),\"targets\"=character(), \"pvals.tfmirpair\"=numeric(),\n                          \"pval.random\"=numeric(),\"zscore\"=numeric(),\"ENTREZ.IDs.coreg.targets\"=character(),\n                          \"ENTREZ.IDs.motiftype.subnetwork\"=character())\n  index=c()\n  for (i  in 1 : dim(tfmir.pairs)[1])\n  {\n    tf   = as.character( tfmir.pairs$tf[i])\n    mirna= as.character( tfmir.pairs$mirna[i] )\n    ## check for composite motifs condition\n    if( dim(net[net$regulator == tf & net$target == mirna, ])[1] > 0   & dim(net[net$regulator == mirna & net$target == tf, ])[1] == 0 )\n    {index=c(index,i)}\n  }\n  motifs=tfmir.pairs[index,]\n  motifs\n  \n  if(dim(motifs)[1] > 0)\n  {\n    ######## Randomize the network and get significance of this type\n    nodes.df=as.data.frame( unique(c(as.character(unlist(net$regulator)), as.character(unlist(net$target)))))  \n    g=graph.data.frame(net[,c(\"regulator\",\"target\")],directed=T,vertices=nodes.df)\n    tmpres=c()\n    for( i in 1 : as.integer(config$NO_OF_Times_FOR_Network_Randomizations))\n    {\n      g.random=rewire(g, keeping_degseq(loops=TRUE, niter = 2*length(get.edgelist(g))))\n      net.random=as.data.frame(get.edgelist(g.random,names=T))\n      names(net.random)=c(\"regulator\",\"target\")\n      tfmir.pairs.random=getPutativeTFmiRPairs(net.random)    \n      #tfmir.pairs.random=getSignificantTFmiRpairs(tfmir.pairs.random,evidence)\n      tfmir.pairs.random[\"pvals.tfmirpair\"]=1\n      tfmir.pairs.random=relaxMultipleTargetsForTFmiRPairs(tfmir.pairs.random)\n      index=c()\n      for ( j  in 1 : dim(tfmir.pairs.random)[1])\n      {\n        tf   = as.character( tfmir.pairs.random$tf[j])\n        mirna= as.character( tfmir.pairs.random$mirna[j] )\n        ## check for composite motifs condition\n        if( dim(net.random[net.random$regulator == tf & net.random$target == mirna, ])[1] > 0   & dim(net.random[net.random$regulator == mirna & net.random$target == tf, ])[1] == 0 )\n        {index=c(index,j)}\n      }\n      motifs.random=tfmir.pairs.random[index,]\n      tmpres= c(tmpres,dim(motifs.random)[1])    \n    }\n    pval<-mean(tmpres > dim(motifs)[1])\n    zscore=   ((dim(motifs)[1]) - (mean(tmpres))) / sd(tmpres)\n    motifs[\"pval.random\"]=pval\n    motifs[\"zscore\"]=zscore\n    ##################################################################\n    ###### get the entrez ids of co-regulated taget genes of each motif\n    motifs[\"Symbol.coreg.targets\"]=\"\"\n    motifs[\"ENTREZ.IDs.coreg.targets\"]=\"\"\n    for( i in 1 : dim(motifs)[1])\n    {\n      tfmirpair=c(as.character(motifs[i,]$tf), as.character(motifs[i,]$mirna))\n      targets=as.character( unlist(net[net$regulator %in% tfmirpair,]$target))\n      targets.mir=targets[grep(symbol,targets)]\n      targets.gene=unique(c(as.character(motifs[i,]$tf), setdiff(targets,targets.mir)))\n      motifs[i, ]$Symbol.coreg.targets=toString(targets.gene)\n      motifs[i, ]$ENTREZ.IDs.coreg.targets=toString(as.vector(unlist(mget(as.character(targets.gene), envir=env, ifnotfound=NA))))\n    }\n    \n    ###### get the entrez ids of co-targetted genes by the same Tf and miRNA\n    motifs[\"Symbol.cotargeted.genes\"]=\"\"\n    motifs[\"ENTREZ.IDs.cotargeted.genes\"]=\"\"\n    for( i in 1 : dim(motifs)[1])\n    {\n      targets.mirna= unlist(net[net$regulator == as.character(motifs[i,]$mirna) , ]$target)\n      targets.mirna= setdiff(targets.mirna, targets.mirna [ grep(symbol, targets.mirna)])  \n      targets.tf= unlist(net[net$regulator == as.character(motifs[i,]$tf), ]$target)\n      targets.tf= setdiff(targets.tf, targets.tf [ grep(symbol, targets.tf)])\n      common.targets=unique(intersect(targets.mirna,targets.tf))\n      motifs[i, ]$Symbol.cotargeted.genes=toString(common.targets)\n      motifs[i, ]$ENTREZ.IDs.cotargeted.genes=toString(as.vector(unlist(mget(as.character(common.targets), envir=env, ifnotfound=NA))))\n    }\n    #   ###### get the entrez ids of subnetworks of each motif type\n    #   tfs= as.character(unlist(motifs$tf))\n    #   genes=as.character(unlist(motifs$targets))\n    #   tfs.genes=unique(c(tfs,genes))\n    #   tfs.genes.entrez=as.vector(unlist(mget(as.character(tfs.genes), envir=org.Hs.egALIAS2EG, ifnotfound=NA)))\n    #   motifs[\"ENTREZ.IDs.motiftype.subnetwork\"]=toString(tfs.genes.entrez)\n    ######  add the type of the motif\n    motif.type=replicate(dim(motifs)[1],\"TF-FFL\")\n    motifs=cbind(motif.type,motifs)\n    return (motifs)\n  }\n  \n  return (motifs.empty)\n}\n\ngetMotifs.miRNA.FFL=function (tfmir.pairs,net)\n{ \n  motifs.empty=data.frame(\"motif.type\"=character(), \"tf\"=character(),\"mirna\"=character(),\"targets\"=character(), \"pvals.tfmirpair\"=numeric(),\n                          \"pval.random\"=numeric(),\"zscore\"=numeric(),\"ENTREZ.IDs.coreg.targets\"=character(),\n                          \"ENTREZ.IDs.motiftype.subnetwork\"=character())\n  index=c()\n  for (i  in 1 : dim(tfmir.pairs)[1])\n  {\n    tf   = as.character( tfmir.pairs$tf[i])\n    mirna= as.character( tfmir.pairs$mirna[i] )\n    ## check for composite motifs condition\n    if( dim(net[net$regulator == tf & net$target == mirna, ])[1] == 0   & dim(net[net$regulator == mirna & net$target == tf, ])[1] > 0 )\n    {index=c(index,i)}\n  }\n  motifs=tfmir.pairs[index,]\n  motifs\n  \n  if(dim(motifs)[1] > 0)\n  {\n    ######## Randomize the network and get significance of this type\n    nodes.df=as.data.frame( unique(c(as.character(unlist(net$regulator)), as.character(unlist(net$target)))))  \n    g=graph.data.frame(net[,c(\"regulator\",\"target\")],directed=T,vertices=nodes.df)\n    tmpres=c()\n    for( i in 1 : as.integer(config$NO_OF_Times_FOR_Network_Randomizations))\n    {\n      g.random=rewire(g, keeping_degseq(loops=TRUE, niter = 2*length(get.edgelist(g))))\n      net.random=as.data.frame(get.edgelist(g.random,names=T))\n      names(net.random)=c(\"regulator\",\"target\")\n      tfmir.pairs.random=getPutativeTFmiRPairs(net.random)    \n      #tfmir.pairs.random=getSignificantTFmiRpairs(tfmir.pairs.random,evidence)\n      tfmir.pairs.random[\"pvals.tfmirpair\"]=1\n      tfmir.pairs.random=relaxMultipleTargetsForTFmiRPairs(tfmir.pairs.random)\n      index=c()\n      for ( j  in 1 : dim(tfmir.pairs.random)[1])\n      {\n        tf   = as.character( tfmir.pairs.random$tf[j])\n        mirna= as.character( tfmir.pairs.random$mirna[j] )\n        ## check for composite motifs condition\n        if( dim(net.random[net.random$regulator == tf & net.random$target == mirna, ])[1] == 0   & dim(net.random[net.random$regulator == mirna & net.random$target == tf, ])[1] > 0 )\n        {index=c(index,j)}\n      }\n      motifs.random=tfmir.pairs.random[index,]\n      tmpres= c(tmpres,dim(motifs.random)[1])    \n    }\n    pval<-mean(tmpres > dim(motifs)[1])\n    zscore=   ((dim(motifs)[1]) - (mean(tmpres))) / sd(tmpres)\n    motifs[\"pval.random\"]=pval\n    motifs[\"zscore\"]=zscore\n    ##################################################################\n    ###### get the entrez ids of co-regulated taget genes of each motif\n    motifs[\"Symbol.coreg.targets\"]=\"\"\n    motifs[\"ENTREZ.IDs.coreg.targets\"]=\"\"\n    for( i in 1 : dim(motifs)[1])\n    {\n      tfmirpair=c(as.character(motifs[i,]$tf), as.character(motifs[i,]$mirna))\n      targets=as.character( unlist(net[net$regulator %in% tfmirpair,]$target))\n      targets.mir=targets[grep(symbol,targets)]\n      targets.gene=unique(c(as.character(motifs[i,]$tf), setdiff(targets,targets.mir)))\n      motifs[i, ]$Symbol.coreg.targets=toString(targets.gene)\n      motifs[i, ]$ENTREZ.IDs.coreg.targets=toString(as.vector(unlist(mget(as.character(targets.gene), envir=env, ifnotfound=NA))))\n    }\n    \n    ###### get the entrez ids of co-targetted genes by the same Tf and miRNA\n    motifs[\"Symbol.cotargeted.genes\"]=\"\"\n    motifs[\"ENTREZ.IDs.cotargeted.genes\"]=\"\"\n    for( i in 1 : dim(motifs)[1])\n    {\n      targets.mirna= unlist(net[net$regulator == as.character(motifs[i,]$mirna) , ]$target)\n      targets.mirna= setdiff(targets.mirna, targets.mirna [ grep(symbol, targets.mirna)])  \n      targets.tf= unlist(net[net$regulator == as.character(motifs[i,]$tf), ]$target)\n      targets.tf= setdiff(targets.tf, targets.tf [ grep(symbol, targets.tf)])\n      common.targets=unique(intersect(targets.mirna,targets.tf))\n      motifs[i, ]$Symbol.cotargeted.genes=toString(common.targets)\n      motifs[i, ]$ENTREZ.IDs.cotargeted.genes=toString(as.vector(unlist(mget(as.character(common.targets), envir=env, ifnotfound=NA))))\n    }\n    #   ###### get the entrez ids of subnetworks of each motif type\n    #   tfs= as.character(unlist(motifs$tf))\n    #   genes=as.character(unlist(motifs$targets))\n    #   tfs.genes=unique(c(tfs,genes))\n    #   tfs.genes.entrez=as.vector(unlist(mget(as.character(tfs.genes), envir=org.Hs.egALIAS2EG, ifnotfound=NA)))\n    #   motifs[\"ENTREZ.IDs.motiftype.subnetwork\"]=toString(tfs.genes.entrez)\n    ######  add the type of the motif\n    motif.type=replicate(dim(motifs)[1],\"miRNA-FFL\")\n    motifs=cbind(motif.type,motifs)\n    return (motifs)\n  }\n  \n  return (motifs.empty)\n}\n\ngetMotifs.coregulation=function (tfmir.pairs,net)\n{ \n  motifs.empty=data.frame(\"motif.type\"=character(), \"tf\"=character(),\"mirna\"=character(),\"targets\"=character(), \"pvals.tfmirpair\"=numeric(),\n                          \"pval.random\"=numeric(),\"zscore\"=numeric(),\"ENTREZ.IDs.coreg.targets\"=character(),\n                          \"ENTREZ.IDs.motiftype.subnetwork\"=character())\n  index=c()\n  for (i  in 1 : dim(tfmir.pairs)[1])\n  {\n    tf   = as.character( tfmir.pairs$tf[i])\n    mirna= as.character( tfmir.pairs$mirna[i] )\n    ## check for composite motifs condition\n    if( dim(net[net$regulator == tf & net$target == mirna, ])[1] == 0   & dim(net[net$regulator == mirna & net$target == tf, ])[1] == 0 )\n    {index=c(index,i)}\n  }\n  motifs=tfmir.pairs[index,]\n  motifs\n  \n  if(dim(motifs)[1] > 0)\n  {\n    ######## Randomize the network and get significance of this type\n    nodes.df=as.data.frame( unique(c(as.character(unlist(net$regulator)), as.character(unlist(net$target)))))  \n    g=graph.data.frame(net[,c(\"regulator\",\"target\")],directed=T,vertices=nodes.df)\n    tmpres=c()\n    for( i in 1 : as.integer(config$NO_OF_Times_FOR_Network_Randomizations))\n    {\n      g.random=rewire(g, keeping_degseq(loops=TRUE, niter = 2*length(get.edgelist(g))))\n      net.random=as.data.frame(get.edgelist(g.random,names=T))\n      names(net.random)=c(\"regulator\",\"target\")\n      tfmir.pairs.random=getPutativeTFmiRPairs(net.random)    \n      #tfmir.pairs.random=getSignificantTFmiRpairs(tfmir.pairs.random,evidence)\n      #if(dim(tfmir.pairs.random)[1] > 0){\n      tfmir.pairs.random[\"pvals.tfmirpair\"]=1\n      tfmir.pairs.random=relaxMultipleTargetsForTFmiRPairs(tfmir.pairs.random)\n      index=c()\n      for ( j  in 1 : dim(tfmir.pairs.random)[1])\n      {\n        tf   = as.character( tfmir.pairs.random$tf[j])\n        mirna= as.character( tfmir.pairs.random$mirna[j] )\n        ## check for composite motifs condition\n        if( dim(net.random[net.random$regulator == tf & net.random$target == mirna, ])[1] == 0   & dim(net.random[net.random$regulator == mirna & net.random$target == tf, ])[1] == 0 )\n        {index=c(index,j)}\n      }\n      motifs.random=tfmir.pairs.random[index,]\n      tmpres= c(tmpres,dim(motifs.random)[1])    \n      #}\n    }\n    pval<-mean(tmpres > dim(motifs)[1])\n    zscore=   ((dim(motifs)[1]) - (mean(tmpres))) / sd(tmpres)\n    motifs[\"pval.random\"]=pval\n    motifs[\"zscore\"]=zscore\n    ##################################################################\n    ###### get the entrez ids of co-regulated taget genes of each motif\n    motifs[\"Symbol.coreg.targets\"]=\"\"\n    motifs[\"ENTREZ.IDs.coreg.targets\"]=\"\"\n    for( i in 1 : dim(motifs)[1])\n    {\n      tfmirpair=c(as.character(motifs[i,]$tf), as.character(motifs[i,]$mirna))\n      targets=as.character( unlist(net[net$regulator %in% tfmirpair,]$target))\n      targets.mir=targets[grep(symbol,targets)]\n      targets.gene=unique(c(as.character(motifs[i,]$tf), setdiff(targets,targets.mir)))\n      motifs[i, ]$Symbol.coreg.targets=toString(targets.gene)\n      motifs[i, ]$ENTREZ.IDs.coreg.targets=toString(as.vector(unlist(mget(as.character(targets.gene), envir=env, ifnotfound=NA))))\n    }\n    \n    ###### get the entrez ids of co-targetted genes by the same Tf and miRNA\n    motifs[\"Symbol.cotargeted.genes\"]=\"\"\n    motifs[\"ENTREZ.IDs.cotargeted.genes\"]=\"\"\n    for( i in 1 : dim(motifs)[1])\n    {\n      targets.mirna= unlist(net[net$regulator == as.character(motifs[i,]$mirna) , ]$target)\n      targets.mirna= setdiff(targets.mirna, targets.mirna [ grep(symbol, targets.mirna)])  \n      targets.tf= unlist(net[net$regulator == as.character(motifs[i,]$tf), ]$target)\n      targets.tf= setdiff(targets.tf, targets.tf [ grep(symbol, targets.tf)])\n      common.targets=unique(intersect(targets.mirna,targets.tf))\n      motifs[i, ]$Symbol.cotargeted.genes=toString(common.targets)\n      motifs[i, ]$ENTREZ.IDs.cotargeted.genes=toString(as.vector(unlist(mget(as.character(common.targets), envir=env, ifnotfound=NA))))\n    }\n    #   ###### get the entrez ids of subnetworks of each motif type\n    #   tfs= as.character(unlist(motifs$tf))\n    #   genes=as.character(unlist(motifs$targets))\n    #   tfs.genes=unique(c(tfs,genes))\n    #   tfs.genes.entrez=as.vector(unlist(mget(as.character(tfs.genes), envir=org.Hs.egALIAS2EG, ifnotfound=NA)))\n    #   motifs[\"ENTREZ.IDs.motiftype.subnetwork\"]=toString(tfs.genes.entrez)\n    ######  add the type of the motif\n    motif.type=replicate(dim(motifs)[1],\"Coreg-FFL\")\n    motifs=cbind(motif.type,motifs)\n    return (motifs)\n  }\n  return (motifs.empty)\n}\n## ==========================================================\n## randomize the network based on the edge type preservation\n## ==========================================================\ngetRandomizedNetwork = function(net){\n  net=read.delim(net.path, header=TRUE) \n  random.network = data.frame(\"regulator\"= character(),\"target\" = character(),\"category\"=character())\n  input.network = net[,c(\"regulator\",\"target\",\"category\")]\n  tf.mirna = data.frame(\"regulator\"= character(),\"target\" = character(),\"category\"=character())\n  tf.gene = data.frame(\"regulator\"= character(),\"target\" = character(),\"category\"=character())\n  mirna.mirna = data.frame(\"regulator\"= character(),\"target\" = character(),\"category\"=character())\n  mirna.gene = data.frame(\"regulator\"= character(),\"target\" = character(),\"category\"=character())\n  gene.gene = data.frame(\"regulator\"= character(),\"target\" = character(),\"category\"=character())\n  \n  tf.mirna = input.network[net$category %in% \"tf-mirna\",]\n  tf.gene = input.network[net$category %in% \"tf-gene\",]\n  mirna.mirna = input.network[net$category %in% \"mirna-mirna\",]\n  mirna.gene = input.network[net$category %in% \"mirna-gene\",]\n  gene.gene = input.network[net$category %in% \"gene-gene\",]\n  \n  niteration = 2 * dim(net)[1]\n  weight.tf.mirna = dim(tf.mirna)[1]\n  weight.tf.gene = dim(tf.gene)[1]\n  weight.mirna.mirna = dim(mirna.mirna)[1]\n  weight.mirna.gene = dim(mirna.gene)[1]\n  weight.gene.gene = dim(gene.gene)[1]\n  if(weight.tf.mirna > 0){\n    for(i in 1:round(niteration/weight.tf.mirna,digits=0)){\n      r = sample(1:weight.tf.mirna,2)\n      target1 = tf.mirna[r[1],]$target\n      target2 = tf.mirna[r[2],]$target\n      tf.mirna[r[1],]$target = target2\n      tf.mirna[r[2],]$target = target1\n    }\n  }\n  if(weight.tf.gene > 0){\n    for(i in 1:round(niteration/weight.tf.gene,digits=0)){\n      r = sample(1:weight.tf.gene,2)\n      target1 = tf.gene[r[1],]$target\n      target2 = tf.gene[r[2],]$target\n      tf.gene[r[1],]$target = target2\n      tf.gene[r[2],]$target = target1\n    }\n  }\n  if(weight.mirna.mirna){\n    for(i in 1:round(niteration/weight.mirna.mirna,digits=0)){\n      r = sample(1:weight.mirna.mirna,2)\n      target1 = mirna.mirna[r[1],]$target\n      target2 = mirna.mirna[r[2],]$target\n      mirna.mirna[r[1],]$target = target2\n      mirna.mirna[r[2],]$target = target1\n    }\n  }\n  if(weight.mirna.gene > 0){\n    for(i in 1:round(niteration/weight.mirna.gene,digits=0)){\n      r = sample(1:weight.mirna.gene,2)\n      target1 = mirna.gene[r[1],]$target\n      target2 = mirna.gene[r[2],]$target\n      mirna.gene[r[1],]$target = target2\n      mirna.gene[r[2],]$target = target1\n    }\n }\n if(weight.gene.gene){\n  for(i in 1:round(niteration/weight.gene.gene,digits=0)){\n    r = sample(1:weight.gene.gene,2)\n    target1 = gene.gene[r[1],]$target\n    target2 = gene.gene[r[2],]$target\n    gene.gene[r[1],]$target = target2\n    gene.gene[r[2],]$target = target1\n  }\n }\n  random.network= rbind(tf.mirna,tf.gene,mirna.mirna,mirna.gene,gene.gene)\n  return(random.network)\n}\nget4NodeMotifs.FFL=function (tfmir.pairs.FFL,net,r)\n{ \n  motifs.empty=data.frame(\"motif.type\"=character(), \"tf\"=character(),\"mirna\"=character(),\"targets\"=character(), \"pvals.tfmirpair\"=numeric(),\n                          \"pval.random\"=numeric(),\"zscore\"=numeric(),\"ENTREZ.IDs.coreg.targets\"=character(),\n                          \"ENTREZ.IDs.motiftype.subnetwork\"=character())\n  motifs.FFL = c()\n  no.motifs = 12\n  no.types = 4\n  if(length(tfmir.pairs.FFL) > 0){\n    m = c()\n    motifs.FFL.primary = list(m,m,m,m,m,m,m,m,m,m,m,m)\n    number = 1\n    for (z  in 1 : no.types)\n    {\n      motifs = c()\n      if(dim(tfmir.pairs.FFL[[z]])[1] > 0){\n        tfmir.pairs = tfmir.pairs.FFL[[z]]\n        index=c()\n        for (i  in 1 : dim(tfmir.pairs)[1]){\n          tf = as.character(tfmir.pairs$tf[i])\n          mirna= as.character(tfmir.pairs$mirna[i])\n          if(dim(net[net$regulator == tf & net$target == mirna, ])[1] > 0 & dim(net[net$regulator == mirna & net$target == tf, ])[1] > 0)\n          {index=c(index,i)}\n        }\n        if(length(index) >0){\n          motifs=tfmir.pairs[index,]\n          motifs\n          motifs.FFL.primary[[number]] <- motifs\n         }\n      }\n      print(motifs)\n      number = number + 1\n        \n      ###end composite##begin TF####################################\n      motifs = c()\n      if(dim(tfmir.pairs.FFL[[z]])[1] > 0){\n        tfmir.pairs = tfmir.pairs.FFL[[z]]\n        index=c()\n        if(dim(tfmir.pairs)[1] > 0){\n          for (i  in 1 : dim(tfmir.pairs)[1]){\n            tf = as.character(tfmir.pairs$tf[i])\n            mirna= as.character(tfmir.pairs$mirna[i])\n            if(dim(net[net$regulator == tf & net$target == mirna, ])[1] > 0 & dim(net[net$regulator == mirna & net$target == tf, ])[1] == 0)\n              {index=c(index,i)}\n          }\n        }\n        if(length(index) >0){\n          print(c(\"index\",index))\n          motifs=tfmir.pairs[index,]\n          motifs\n          motifs.FFL.primary[[number]] <- motifs\n        }\n      }\n      \n      print(motifs)\n      number = number + 1\n      ###end composite##begin miRNA#################################\n      motifs = c()\n      if(dim(tfmir.pairs.FFL[[z]])[1] > 0){\n        tfmir.pairs = tfmir.pairs.FFL[[z]]\n        index=c()\n        if(length(tfmir.pairs) > 0){\n          for (i  in 1 : length(tfmir.pairs)){\n            tf = as.character(tfmir.pairs$tf[i])\n            mirna= as.character(tfmir.pairs$mirna[i])\n            if(dim(net[net$regulator == tf & net$target == mirna, ])[1] == 0 & dim(net[net$regulator == mirna & net$target == tf, ])[1] > 0)\n              {index=c(index,i)}\n            }\n        }\n        if(length(index) >0){\n          motifs=tfmir.pairs[index,]\n          motifs\n          motifs.FFL.primary[[number]] <- motifs\n        }\n      }\n      \n      print(motifs)\n      number = number + 1\n    }#end for z\n    print(motifs.FFL.primary)\n    #motifs.FFL.primary includes 12 primary motifs of size 4. \n    ######## Randomize the network and get significance of each type\n    nodes.df=as.data.frame(unique(c(as.character(unlist(net$regulator)), as.character(unlist(net$target)))))  \n    g=graph.data.frame(net[,c(\"regulator\",\"target\")],directed=T,vertices=nodes.df)\n    Flag = 0\n    for(i in 1:no.motifs){\n      if(length(motifs.FFL.primary[[1]]) > 0){\n        #print(c(\"length\",length(motifs.FFL.primary[[1]])))\n        Flag = 1\n      }\n    }\n    if(Flag==1)\n    {  \n      tmpres.FFL.random = matrix(ncol= no.motifs,nrow=100,rep(0,1200))\n      regulators=unique(as.character(unlist(net$regulator[which(net$category %in% \"tf-gene\" | net$category %in% \"mirna-gene\" | net$category %in% \"mirna-mirna\")])))\n      mirnas.regulator=regulators[ grep(symbol,regulators)]\n      tfs=setdiff(regulators, mirnas.regulator)\n      targets=unique(as.character(unlist(net$target)))\n      mirnas.target=targets[ grep(symbol,targets)]\n      genes=setdiff(targets, mirnas.target)\n      #r = \"non-conserved\"\n      for( i in 1 : as.integer(config$NO_OF_Times_FOR_Network_Randomizations_4Node))\n      {\n        x = 1\n        tfmir.pairs.random.FFL = c()\n        if(r==\"non-conserved\"){\n          g.random=rewire(g, keeping_degseq(loops=TRUE, niter = 2*length(get.edgelist(g))))\n          #net.random=getRandomizedNetwork(net)\n          net.random=as.data.frame(get.edgelist(g.random,names=T))\n          category.type=replicate(dim(net.random)[1],\"gene-gene\")\n          net.random=cbind(net.random,I(category.type))\n          names(net.random)=c(\"regulator\",\"target\",\"category\")\n        \n          net.random$category[which(net.random$regulator %in% tfs & net.random$target %in% genes)] = \"tf-gene\"\n          net.random$category[which(net.random$regulator %in% tfs & net.random$target %in% mirnas.target)] = \"tf-mirna\"\n          net.random$category[which(net.random$regulator %in% mirnas.regulator & net.random$target %in% mirnas.target)] = \"mirna-mirna\"\n          net.random$category[which(net.random$regulator %in% mirnas.regulator & net.random$target %in% genes)] = \"mirna-gene\"\n          net.random$category[which(net.random$regulator %in% genes & net.random$target %in% mirnas.target)] = \"gene-mirna\"\n        }\n        else{\n          net.random=getRandomizedNetwork(net)\n        }\n        ##randomize the network based on the edge-type preservation\n        ##randomize_conserve()\n        tfmir.pairs.random.tf.mirna=getPutativeTFmiRPairs4Node_tf_mirna(net.random)\n        tfmir.pairs.random.tf=getPutativeTFmiRPairs4Node_tf(net.random) \n        tfmir.pairs.random.mirna=getPutativeTFmiRPairs4Node_mirna(net.random) \n        tfmir.pairs.random.gene.gene=getPutativeTFmiRPairs4Node(net.random)\n        tfmir.pairs.random.FFL = list(tfmir.pairs.random.tf.mirna,tfmir.pairs.random.tf,tfmir.pairs.random.mirna,tfmir.pairs.random.gene.gene)\n        print(c(i,dim(tfmir.pairs.random.tf.mirna)[1],dim(tfmir.pairs.random.tf)[1],dim(tfmir.pairs.random.mirna)[1],dim(tfmir.pairs.random.gene.gene)[1]))\n        \n        for(z in 1:no.types)\n        {\n          #begin tf-miRNA\n          if(dim(tfmir.pairs.random.FFL[[z]])[1] > 0){\n            tfmir.pairs.random = tfmir.pairs.random.FFL[[z]]\n            tfmir.pairs.random[\"pvals.tfmirpair\"]=1\n            index=c()\n            for ( j  in 1 : dim(tfmir.pairs.random)[1])\n            {\n              tf   = as.character( tfmir.pairs.random$tf[j])\n              mirna= as.character( tfmir.pairs.random$mirna[j] )\n              if( dim(net.random[net.random$regulator == tf & net.random$target == mirna, ])[1] > 0   & dim(net.random[net.random$regulator == mirna & net.random$target == tf, ])[1] > 0 )\n              {index=c(index,j)}\n            }\n            if(length(index) >0){\n              motifs.random=tfmir.pairs.random[index,]\n              tmpres.FFL.random[i,x] = dim(motifs.random)[1]\n            }\n          }\n          x = x + 1\n          if(dim(tfmir.pairs.random.FFL[[z]])[1] > 0){\n            #begin tf\n            tfmir.pairs.random = tfmir.pairs.random.FFL[[z]]\n            tfmir.pairs.random[\"pvals.tfmirpair\"]=1\n            index=c()\n            for ( j  in 1 : dim(tfmir.pairs.random)[1])\n            {\n              tf   = as.character( tfmir.pairs.random$tf[j])\n              mirna= as.character( tfmir.pairs.random$mirna[j] )\n              if( dim(net.random[net.random$regulator == tf & net.random$target == mirna, ])[1] > 0   & dim(net.random[net.random$regulator == mirna & net.random$target == tf, ])[1] == 0 )\n                {index=c(index,j)}\n            }\n            if(length(index) >0){\n              motifs.random=tfmir.pairs.random[index,]\n              tmpres.FFL.random[i,x] = dim(motifs.random)[1]\n            }\n          }\n          x = x + 1\n          if(dim(tfmir.pairs.random.FFL[[z]])[1] > 0){\n            #begin miRNA\n            tfmir.pairs.random = tfmir.pairs.random.FFL[[z]]\n            tfmir.pairs.random[\"pvals.tfmirpair\"]=1\n            index=c()\n            for ( j  in 1 : dim(tfmir.pairs.random)[1])\n            {\n              tf   = as.character( tfmir.pairs.random$tf[j])\n              mirna= as.character( tfmir.pairs.random$mirna[j] )\n              if( dim(net.random[net.random$regulator == tf & net.random$target == mirna, ])[1] == 0   & dim(net.random[net.random$regulator == mirna & net.random$target == tf, ])[1] > 0 )\n                {index=c(index,j)}\n            }\n            if(length(index) >0){\n              motifs.random=tfmir.pairs.random[index,]\n              tmpres.FFL.random[i,x] = dim(motifs.random)[1]\n            }\n          }\n          x = x + 1\n        }#end of for(z in 1:length(tfmir.pairs))\n      }#end of for( i in 1 : as.integer(config$NO_OF_Times_FOR_Network_Randomizations_4Node))\n      ########################################################################\n      motifs.FFL = c()\n      for(z in 1:no.motifs)\n      { \n        tmpres = c()\n        motifs = motifs.FFL.primary[[z]]\n        tmpres = tmpres.FFL.random[,z]\n        if(length(motifs) != 0){ \n          pval<-mean(tmpres > dim(motifs)[1])\n          zscore=   ((dim(motifs)[1]) - (mean(tmpres))) / sd(tmpres)\n          motifs[\"pval.random\"]=pval\n          if(zscore == \"inf\")\n            zscore = 0\n          motifs[\"zscore\"]=zscore\n          \n          ##################################################################\n          ###### get the entrez ids of co-regulated taget genes of each motif\n          motifs[\"Symbol.coreg.targets\"]=\"\"\n          motifs[\"ENTREZ.IDs.coreg.targets\"]=\"\"\n          for( i in 1 : dim(motifs)[1])\n          {\n            tfmirpair=c(as.character(motifs[i,]$tf), as.character(motifs[i,]$mirna))\n            targets=as.character( unlist(net[net$regulator %in% tfmirpair,]$target))\n            targets.mir=targets[grep(symbol,targets)]\n            targets.gene=unique(c(as.character(motifs[i,]$tf), setdiff(targets,targets.mir)))\n            motifs[i, ]$Symbol.coreg.targets=toString(targets.gene)\n            motifs[i, ]$ENTREZ.IDs.coreg.targets=toString(as.vector(unlist(mget(as.character(targets.gene), envir=env, ifnotfound=NA))))\n          }\n          \n          ###### get the entrez ids of co-targetted genes by the same Tf and miRNA\n          motifs[\"Symbol.cotargeted.genes\"]=\"\"\n          motifs[\"ENTREZ.IDs.cotargeted.genes\"]=\"\"\n          for( i in 1 : dim(motifs)[1])\n          {\n            targets.mirna= unlist(net[net$regulator == as.character(motifs[i,]$mirna) , ]$target)\n            targets.mirna= setdiff(targets.mirna, targets.mirna [ grep(symbol, targets.mirna)])  \n            targets.tf= unlist(net[net$regulator == as.character(motifs[i,]$tf), ]$target)\n            targets.tf= setdiff(targets.tf, targets.tf [ grep(symbol, targets.tf)])\n            common.targets=unique(intersect(targets.mirna,targets.tf))\n            motifs[i, ]$Symbol.cotargeted.genes=toString(common.targets)\n            motifs[i, ]$ENTREZ.IDs.cotargeted.genes=toString(as.vector(unlist(mget(as.character(common.targets), envir=env, ifnotfound=NA))))\n          }\n          \n          ######  add the type of the motif\n          MotifTypes = switch(z, \"Com-FFL-Full\",\"TF-FFL-Full\",\"miRNA-FFL-Full\", \"Com-FFL-TF\", \"TF-FFL-TF\", \"miRNA-FFL-TF\", \"Com-FFL-miRNA\", \"TF-FFL-miRNA\", \"miRNA-FFL-miRNA\", \"Com-FFL\", \"TF-FFL\", \"miRNA-FFL\")\n          motif.type=replicate(dim(motifs)[1],MotifTypes)\n          motifs=cbind(motif.type,motifs)\n          motifs.FFL = rbind(motifs.FFL,motifs)\n        }#end if there is any specified motif\n      }#end of for(z in 1:length(motif.FFL.primary))\n      #print(\"hello\")\n      return (motifs.FFL)    \n    }#end of if: Randomize the network if there is any primary motifs\n  }#end of if(length(tfmir.pairs.FFL) > 0): iF there is any primary motifs\n  return (motifs.empty)\n}#end of function",
    "created" : 1478278118772.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2840376315",
    "id" : "550B103A",
    "lastKnownWriteTime" : 1480513119,
    "path" : "/Library/WebServer/Documents/TFmiR/backend/graph.R",
    "project_path" : "graph.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}